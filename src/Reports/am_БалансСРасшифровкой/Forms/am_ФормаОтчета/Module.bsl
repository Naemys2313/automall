
&НаСервере
Функция РезультатОбработкаРасшифровкиНаСервере(ИдентификаторРасшифровки)
	ДанныеРасшифровкиВХ = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	ПоляРасшифровки = ПолучитьМассивПолейРасшифровки(ИдентификаторРасшифровки, ДанныеРасшифровкиВХ, Ложь);
	ПолеРасшифровки = ПоляРасшифровки[0];
	
	//
	
	
	//
	
	Возврат ПолеРасшифровки.Значение.Наименование;
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	ИдентификаторСтПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод").ИдентификаторПользовательскойНастройки;
	
	ИдентификаторОрганизация = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Организация").ИдентификаторПользовательскойНастройки;
	
	СтПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторСтПериод).Значение;
	ДатаНачала = СтПериод.ДатаНачала;
	ДатаОкончания = СтПериод.ДатаОкончания;
	
	Организация = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОрганизация).Значение;
	
	СтандартнаяОбработка = Ложь;
	
	НаименованиеСчета = РезультатОбработкаРасшифровкиНаСервере(Расшифровка);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Назначение", НаименованиеСчета);
	ПараметрыОткрытия.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыОткрытия.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыОткрытия.Вставить("Организация", Организация);
	
	Если СтрНайти(Элемент.ТекущаяОбласть.Имя, "C4") <> 0 Тогда		
		ОткрытьФорму("Отчет.am_БалансСРасшифровкой.Форма.am_РасшифровкаЗапасы", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	ИначеЕсли СтрНайти(Элемент.ТекущаяОбласть.Имя, "C5") <> 0 Тогда
		
		ОткрытьФорму("Отчет.am_БалансСРасшифровкой.Форма.am_РасшифровкаВРазрезеНоменклатур", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый); 
	КонецЕсли
КонецПроцедуры

&НаСервере
Процедура РезультатОбработкаДополнительнойРасшифровкиНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	РезультатОбработкаДополнительнойРасшифровкиНаСервере();
КонецПроцедуры

#Область Расшифровка
 
// Возвращает доступное поле по полю компоновки
 
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
 
    Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
 
        ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
 
    Иначе
 
        ПолеПоиска = ПолеКомпоновкиДанных;
 
    КонецЕсли;
 
    Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
 
        ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
 
        ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
 
        Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
 
    Иначе
 
        Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
 
    КонецЕсли;
 
КонецФункции
 
Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь) Экспорт
 
    Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
 
        Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
 
 //           ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
 //
 //           Если ДоступноеПоле = Неопределено Тогда
 //
 //               Продолжить;
 //
 //           КонецЕсли;
 //
 //           Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
 //
 //               Продолжить;
 //
 //           КонецЕсли;
 
            МассивПолейРасшифровки.Добавить(Поле);
 
        КонецЦикла;
 
    КонецЕсли;
 
    Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
 
        ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
 
    КонецЦикла;
 
КонецФункции
 
// Возвращает массив, по которому следует расшифровать отчет
 
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ВключатьРесурсы = Ложь) Экспорт
 
    МассивПолейРасшифровки = Новый Массив;
 
    Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных")
 
        И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
 
        Возврат МассивПолейРасшифровки;
 
    КонецЕсли;
 
    // Добавим поля родительских группировок
 
    ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы);
 
    Количество = МассивПолейРасшифровки.Количество();
 
    Для Индекс = 1 По Количество Цикл
 
        ОбратныйИндекс = Количество - Индекс;
 
        Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
 
            Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
 
                МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
 
                Прервать;
 
            КонецЕсли;
 
        КонецЦикла;
 
    КонецЦикла;
 
    // Добавим отбор, установленный в отчете
 
    Для каждого ЭлементОтбора Из ДанныеРасшифровки.Настройки.Отбор.Элементы Цикл
 
        Если Не ЭлементОтбора.Использование Тогда
 
            Продолжить;
 
        КонецЕсли;
 
        МассивПолейРасшифровки.Добавить(ЭлементОтбора);
 
    КонецЦикла;
 
    Возврат МассивПолейРасшифровки;
 
КонецФункции
 
#КонецОбласти
