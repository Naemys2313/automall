
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.Свойство("Назначение") Тогда
		Отказ = Истина;
	КонецЕсли;
	

	Счет = Параметры.Назначение;
	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = Параметры.ДатаОкончания;
	Организация = Параметры.Организация;
	
	Макет = Отчеты.am_БалансСРасшифровкой.ПолучитьМакет("am_РасшифровкаЗапасов");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	
	РасшифровкаТабДок.Вывести(ОбластьШапка);
	
	Если Счет = "Переводы в пути" ИЛИ Счет = "Касса" ИЛИ Счет = "Банк" Тогда
		ЗаполнитьПоДенежнымСредствам(ДатаНачала, ДатаОкончания, Счет, Организация);
	Иначе
		ЗаполнитьПоСчету(ДатаНачала, ДатаОкончания, Счет, Организация);	
	КонецЕсли;	
	
	//РасшифровкаТабДок.АвтоМасштаб = Истина;
	//РасчетШириныКолонок(РасшифровкаТабДок);
КонецПроцедуры

Процедура ЗаполнитьПоСчету(ДатаНачала, ДатаОкончания, Счет, Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УправленческийОстаткиИОбороты.Счет КАК СчетЗапасы,
	               |	СУММА(УправленческийОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК КонечныйОстаток,
	               |	СУММА(УправленческийОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
	               |	УправленческийОстаткиИОбороты.Организация КАК Организация,
	               |	УправленческийОстаткиИОбороты.Регистратор КАК Регистратор,
	               |	УправленческийОстаткиИОбороты.Период КАК Период,
	               |	УправленческийОстаткиИОбороты.СуммаОборот КАК СуммаОборот
	               |ИЗ
	               |	РегистрБухгалтерии.Управленческий.ОстаткиИОбороты(
	               |			НАЧАЛОПЕРИОДА(&ПериодНачало, День),
	               |			КОНЕЦПЕРИОДА(&ПериодКонец, День),
	               |			Регистратор,
	               |			,
	               |			Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)
	               |				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство),
	               |			СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)
	               |				И (Организация = &Организация
	               |					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК УправленческийОстаткиИОбороты
	               |ГДЕ
	               |	УправленческийОстаткиИОбороты.СуммаКонечныйОстатокДт - УправленческийОстаткиИОбороты.СуммаНачальныйОстатокДт <> 0
	               |	И УправленческийОстаткиИОбороты.Счет.Наименование = &Счет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УправленческийОстаткиИОбороты.Счет,
	               |	УправленческийОстаткиИОбороты.Организация,
	               |	УправленческийОстаткиИОбороты.Регистратор,
	               |	УправленческийОстаткиИОбороты.Период,
	               |	УправленческийОстаткиИОбороты.СуммаОборот
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УправленческийОстаткиИОбороты.Счет,
	               |	СУММА(-1 * УправленческийОстаткиИОбороты.СуммаКонечныйОстатокКт),
	               |	СУММА(-1 * УправленческийОстаткиИОбороты.СуммаНачальныйОстатокКт),
	               |	УправленческийОстаткиИОбороты.Организация,
	               |	УправленческийОстаткиИОбороты.Регистратор,
	               |	УправленческийОстаткиИОбороты.Период,
	               |	УправленческийОстаткиИОбороты.СуммаОборот
	               |ИЗ
	               |	РегистрБухгалтерии.Управленческий.ОстаткиИОбороты(
	               |			НАЧАЛОПЕРИОДА(&ПериодНачало, День),
	               |			КОНЕЦПЕРИОДА(&ПериодКонец, День),
	               |			Регистратор,
	               |			,
	               |			Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ТорговаяНаценка),
	               |			СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)
	               |				И (Организация = &Организация
	               |					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК УправленческийОстаткиИОбороты
	               |ГДЕ
	               |	УправленческийОстаткиИОбороты.Счет.Наименование = &Счет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УправленческийОстаткиИОбороты.Счет,
	               |	УправленческийОстаткиИОбороты.Организация,
	               |	УправленческийОстаткиИОбороты.Регистратор,
	               |	УправленческийОстаткиИОбороты.Период,
	               |	УправленческийОстаткиИОбороты.СуммаОборот";
	
	Запрос.УстановитьПараметр("ПериодНачало", ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКонец", ДатаОкончания);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьСтрокуВТабДок(Выборка.Регистратор, Выборка.Период, Выборка.СуммаОборот, Выборка.НачальныйОстаток, Выборка.КонечныйОстаток, Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДенежнымСредствам(ДатаНачала, ДатаОкончания, Счет, Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УправленческийОстаткиИОбороты.Счет КАК СчетДенежныеСредства,
	               |	УправленческийОстаткиИОбороты.СуммаКонечныйОстатокДт КАК КонечныйОстаток,
	               |	УправленческийОстаткиИОбороты.СуммаНачальныйОстатокДт КАК НачальныйОстаток,
	               |	УправленческийОстаткиИОбороты.Организация КАК Организация,
	               |	УправленческийОстаткиИОбороты.Регистратор КАК Регистратор,
	               |	УправленческийОстаткиИОбороты.Период КАК Период,
	               |	УправленческийОстаткиИОбороты.СуммаОборот КАК СуммаОборот
	               |ИЗ
	               |	РегистрБухгалтерии.Управленческий.ОстаткиИОбороты(
	               |			НАЧАЛОПЕРИОДА(&ПериодНачало, ДЕНЬ),
	               |			КОНЕЦПЕРИОДА(&ПериодОкончание, ДЕНЬ),
	               |			Регистратор,
	               |			,
	               |			Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ДенежныеСредства),
	               |			СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)
	               |				И (Организация = &Организация
	               |					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК УправленческийОстаткиИОбороты
	               |ГДЕ
	               |	УправленческийОстаткиИОбороты.СуммаКонечныйОстатокДт - УправленческийОстаткиИОбороты.СуммаНачальныйОстатокДт <> 0
	               |	И УправленческийОстаткиИОбороты.Счет.Наименование = &Счет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	
	Запрос.УстановитьПараметр("ПериодНачало", ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОкончание", ДатаОкончания);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьСтрокуВТабДок(Выборка.Регистратор, Выборка.Период, Выборка.СуммаОборот, Выборка.НачальныйОстаток, Выборка.КонечныйОстаток, Ложь);		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТабДок(Регистратор, Период, Оборот, НачальныйОстаток, КонечныйОстаток, ВыводитьКнопку)
	Макет = Отчеты.am_БалансСРасшифровкой.ПолучитьМакет("am_РасшифровкаЗапасов");	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ОбластьСтрока.Параметры.Период = Период;
	ОбластьСтрока.Параметры.Регистратор = Регистратор;
	Если Оборот < 0 ТОгда
		ОбластьСтрока.Параметры.Расход = Оборот;
	Иначе
		ОбластьСтрока.Параметры.Приход = Оборот;	
	КонецЕсли;
		
	ОбластьСтрока.Параметры.НачальныйОстаток = НачальныйОстаток;
	ОбластьСтрока.Параметры.КонечныйОстаток = КонечныйОстаток;
	
	ОбластьСтрока.Параметры.РегистраторРасшифровка = Регистратор;
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("Регистратор", Регистратор);
	
	РасшифровкаТабДок.Вывести(ОбластьСтрока);
КонецПроцедуры

Процедура РасчетШириныКолонок(ТабличныйДокумент)
	
	Перем МаксимальноеКоличествоСтрок, МаксимальнаяШиринаКолонки;
	Перем КонечнаяСтрока, НачальнаяСтрока, ТекущаяКолонка, ТекущаяСтрока, НачалоДанных;
	Перем ОбластьШапки, ОбластьПодвала;
	Перем ШиринаКолонки, ТекстЯчейки, НомерСтрокиТекста;
	Перем КоличествоУровнейГруппировокСтрок, Отступ;
	Перем ШириныКолонок;
	
	// Максимальное количество строк отчета, которые будут использованы для расчета ширин колонок
	МаксимальноеКоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	// Ограничение максимальной ширины колонки
	МаксимальнаяШиринаКолонки = 20;
	// Массив, в который будут помещаться ширины колонок
	ШириныКолонок = Новый Массив;
	// Получим количество уровней группировок в отчете для учета автоматического отступа
	КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	
	// Инициализируем начальные строки
	НачальнаяСтрока = 1;//с 1 строки табличного документа начинается вывод данных в таблицу, у вас может таблица начинаться с другой строки, например если выводятся еще отборы и заголовок в отчете
	НачалоДанных = 1;
	КонечнаяСтрока = НачальнаяСтрока + МаксимальноеКоличествоСтрок;
	// Ограничим конечную строку
	КонечнаяСтрока = Мин(КонечнаяСтрока, ТабличныйДокумент.ВысотаТаблицы);
	
	// Переберем все колонки отчета
	Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		АвтоОтступ = 0;
		
		// Переберем строки, которые будут использованы для расчета ширин колонок
		Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл
			
			ШиринаКолонки = 0;

			// Получим область текущей ячейки
			ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка);
			
			Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда
				
				// Данная ячейка принадлежит объединенным ячейкам и не является начальной ячейкой
				Продолжить;
				
			КонецЕсли;
			
			Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда
				
				// Для первой строки с данными получим значение автоотступа
				АвтоОтступ = ОбластьЯчейки.АвтоОтступ;
				
			КонецЕсли;
			
			// Получим текст ячейки
			ТекстЯчейки = ОбластьЯчейки.Текст;
			
			// Для каждой строки из текста ячейки рассчитаем количество символов в строке
			Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл
				
				ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(СокрЛП(ТекстЯчейки), НомерСтрокиТекста));
				
				// Если используется автоотступ, то прибавим к ширине ячейки его величину
				Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда
					
					ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ;
					
				КонецЕсли;
				
				ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки);

			КонецЦикла;

			Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда
				
				// Ограничим ширину колонки
				ШиринаКолонки = МаксимальнаяШиринаКолонки;
			КонецЕсли;
			
			Если ШиринаКолонки <> 0 Тогда
				// Ширина колонки рассчитана
				
				// Определим, сколько ячеек по ширине используется в области для текущей ячейки
				КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево;
				
				// Переберем все ячейки, расположенные в области
				Для НомерКолонки = 0 По КоличествоКолонок Цикл
					
					Если ШириныКолонок.ВГраница() > ТекущаяКолонка - 1 + НомерКолонки Тогда
						
						// В массиве ширин колонок уже был элемент для текущей колонки
						
						Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда
							// Значение ширины колонки еще не было установлено
							
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1);
							
						Иначе
							// Значение ширины колонки уже было установлено
							// Вычислим максимум ширины колонки
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = 
								Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1));
							
						КонецЕсли;
						
					Иначе
						
						// В массиве ширин колонок еще не было элемента для данной колонки
						// Добавим элемент в массив ширин колонок
						ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;	// Конец цикла перебора строк
		
	КонецЦикла;	// Конец цикла перебора колонок
	
	// Переберем все элементы в массиве вычисленных ширин колонок
	Для ТекущаяКолонка = 0 По ШириныКолонок.ВГраница() Цикл
		
		Если ШириныКолонок[ТекущаяКолонка] <> Неопределено Тогда
			// Ширина колонок установлена
			// Установим ширину области ячеек
			ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки = ШириныКолонок[ТекущаяКолонка] + 1;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	ПоказатьЗначение(, Расшифровка);	

КонецПроцедуры
