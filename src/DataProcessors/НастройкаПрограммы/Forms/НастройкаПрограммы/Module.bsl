

#Область Процедуры_на_форме

&НаСервере
Процедура _ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	am_ОбновитьНастройкиНаСервере();
	ВидимостьИДоступностьОбъектовФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
&ИзменениеИКонтроль("ДеревоРазделов")
Функция am_ДеревоРазделов()

	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");

	ДеревоРазделов = Новый ДеревоЗначений;
	ДеревоРазделов.Колонки.Добавить("Имя", ТипСтрока);
	ДеревоРазделов.Колонки.Добавить("Представление", ТипСтрока);
	ДеревоРазделов.Колонки.Добавить("Видимость", ТипБулево);
	ДеревоРазделов.Колонки.Добавить("ЭтоГруппа", ТипБулево);

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаКомпания";
	Раздел.Представление = НСтр("ru='Компания'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаCRM";
	Раздел.Представление = НСтр("ru='CRM'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПродажи";
	Раздел.Представление = НСтр("ru='Продажи'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаЗакупки";
	Раздел.Представление = НСтр("ru='Закупки'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаРаботы";
	Раздел.Представление = НСтр("ru='Работы'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПроизводство";
	Раздел.Представление = НСтр("ru='Производство'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаДеньги";
	Раздел.Представление = НСтр("ru='Деньги'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаЗарплата";
	Раздел.Представление = НСтр("ru='Зарплата'");
	
	//[2020.08.29] OBISOFT [obisoft_доработки] melniksv begin	| описание доработки
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "am_СтраницаАвтомолл";
	Раздел.Представление = НСтр("ru='Автомолл'");	
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "zac_Страница1СЗакуп";
	Раздел.Представление = НСтр("ru='1С:Закуп'");	
	//[2020.08.29] OBISOFT [obisoft_доработки] melniksv end
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПерсональныеНастройки";
	Раздел.Представление = НСтр("ru='Персональные настройки'");
	Раздел.ЭтоГруппа = Истина;

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаПерсональныеНастройкиПочтаСмс";
	Подраздел.Представление = НСтр("ru='Почта и SMS'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаПерсональныеНастройкиОбменСGoogle";
	Подраздел.Представление = НСтр("ru='Обмен с Google'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаПерсональныеНастройкиПараметрыПечати";
	Подраздел.Представление = НСтр("ru='Параметры печати'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаПерсональныеНастройкиРаботаСФайлами";
	Подраздел.Представление = НСтр("ru='Работа с файлами'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаПерсональныеНастройкиПрочее";
	Подраздел.Представление = НСтр("ru='Прочее'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаИнтеграцияСДругимиПрограммами";
	Раздел.Представление = НСтр("ru='Интеграция с другими программами'");
	Раздел.ЭтоГруппа = Истина;

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСПрограммами1СиРИБ";
	Подраздел.Представление = НСтр("ru='Синхронизация с программами 1С:Предприятие и РИБ'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСМобильнымПриложением";
	Подраздел.Представление = НСтр("ru='Синхронизация с мобильным приложением'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиОбменССайтом";
	Подраздел.Представление = НСтр("ru='Обмен с сайтом'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиЯндексДоставка";
	Подраздел.Представление = НСтр("ru='Яндекс.Доставка'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаОбменЭлектроннымиДокументами";
	Раздел.Представление = НСтр("ru='Обмен электронными документами'");
	Раздел.ЭтоГруппа = Истина;

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиБизнесСеть";
	Подраздел.Представление = НСтр("ru='1C:Бизнес-сеть'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументами1СНоменклатура";
	Подраздел.Представление = НСтр("ru='1С:Номенклатура'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиОбменСКонтрагентами";
	Подраздел.Представление = НСтр("ru='Обмен с контрагентами'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиОбменСБанками";
	Подраздел.Представление = НСтр("ru='Обмен с банками'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиИнтеграцияСЯндексКассой";
	Подраздел.Представление = НСтр("ru='Яндекс.Касса'");

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаАдминистрирование";
	Раздел.Представление = НСтр("ru='Администрирование'");
	Раздел.ЭтоГруппа = Истина;

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеВерсионированиеОбъектов";
	Подраздел.Представление = НСтр("ru='Версионирование объектов'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеДополнительныеРеквизиты";
	Подраздел.Представление = НСтр("ru='Дополнительные реквизиты'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеЗащитаПерсональныхДанных";
	Подраздел.Представление = НСтр("ru='Защита персональных данных'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеИнтернетПоддержкаИСервисы";
	Подраздел.Представление = НСтр("ru='Интернет-поддержка и сервисы'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеКонтактнаяИнформация";
	Подраздел.Представление = НСтр("ru='Контактная информация'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеКорректировкаДанных";
	Подраздел.Представление = НСтр("ru='Корректировка данных'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеМониторингОценкаПроизводительности";
	Подраздел.Представление = НСтр("ru='Мониторинг и оценка производительности'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеНастройкиПользователейИПрав";
	Подраздел.Представление = НСтр("ru='Настройки пользователей и прав'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеОбщиеНастройки";
	Подраздел.Представление = НСтр("ru='Общие настройки'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеПечатныеФормыОтчетыИОбработки";
	Подраздел.Представление = НСтр("ru='Печатные формы, отчеты и обработки'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеОбслуживание";
	Подраздел.Представление = НСтр("ru='Поддержка и обслуживание'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеПодключаемоеОборудование";
	Подраздел.Представление = НСтр("ru='Подключаемое оборудование'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеПочтаСмс";
	Подраздел.Представление = НСтр("ru='Почта, SMS, напоминания'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеРаботаВСервисе";
	Подраздел.Представление = НСтр("ru='Работа в сервисе'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеНастройкиРаботыСФайлами";
	Подраздел.Представление = НСтр("ru='Работа с файлами'");

	Подраздел = Раздел.Строки.Добавить();
	Подраздел.Имя = "СтраницаАдминистрированиеРегламентныеОперации";
	Подраздел.Представление = НСтр("ru='Регламентные операции'");

	ЗаполнитьПредставлениеРазделов(ДеревоРазделов.Строки);

	Возврат ДеревоРазделов;

КонецФункции


//[2021.01.17] OBISOFT [obisoft_доработки] melniksv begin	| АВТОМОЛЛ


&НаКлиенте
Процедура am_СостояниеРасширенияЗакупПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_СохранятьЦенуПокупкиПриПроведении, Элемент.Имя);
	
	ВидимостьИДоступностьОбъектовФормы();

КонецПроцедуры

&НаКлиенте
Процедура am_УпущенныйСпросПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_УпущенныйСпрос, Элемент.Имя);
	ВидимостьИДоступностьОбъектовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура am_УпущенныйСпросНФСПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_УпущенныйСпросНФС, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_УпущенныйСпросНФППриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_УпущенныйСпросНФП, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_НижеЗакупочнойЗППриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_НижеЗакупочнойЗП, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_НижеЗакупочнойРНПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_НижеЗакупочнойРН, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ТЧЗаказаПокупателяПоказатьАртикулПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ТЧЗаказаПокупателяПоказатьАртикул, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ТЧЗаказаПокупателяПоказатьКатегорииПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ТЧЗаказаПокупателяПоказатьКатегории, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ТЧЗаказаПокупателяПоказатьБрендПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ТЧЗаказаПокупателяПоказатьБренд, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ТЧЗаказаПокупателяПоказатьПоставщикаПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ТЧЗаказаПокупателяПоказатьПоставщика, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_АвтоВЧККМПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_АвтоВЧККМ, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_НижеЗакупочнойЧККМПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_НижеЗакупочнойЧККМ, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ДоступностьОстаткиИРезервыЧекККМПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ДоступностьОстаткиИРезервыЧекККМ, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ЗакупочнаяЦенаПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ЗакупочнаяЦена, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ПульсБизнесаБазовыеНастройкиПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ПульсБизнеса, Элемент.Имя);
	
КонецПроцедуры
 
&НаКлиенте
Процедура am_АвтоВЗППриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_АвтоВЗП, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ОбменССТОПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ОбменССТО, Элемент.Имя);
	
	ПредзаполнимДанныеСправочниковПоУмолчанию(); 
	
КонецПроцедуры

&НаКлиенте
Процедура am_УпрощеннаяФормаНоменклатурыПриИзмененииПосле(Элемент)

	am_ИзменитьНастройки(am_УпрощеннаяФормаНоменклатуры, Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура am_БлокЦеныПриИзмененииПосле(Элемент)

	am_ИзменитьНастройки(am_Цены, Элемент.Имя);
	
	am_ЦеныПроцентНаценкиБренд = am_Цены;
	am_ИзменитьНастройки(am_ЦеныПроцентНаценкиБренд, "ПроцентНаценкиДляБренда");
	
	am_СохранятьЦенуПокупкиПриПроведении = am_Цены;
	am_ИзменитьНастройки(am_СохранятьЦенуПокупкиПриПроведении, "СохранятьЦенуПокупкиПриПроведении");
	
	Если am_Цены Тогда
		Элементы.am_ГруппаОсновная13.Видимость = Ложь;
		Элементы.am_ГруппаОсновная14.Видимость = Истина;
	
		ПредзаполнимДанныеСправочниковПоУмолчанию();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура am_ПроцентНаценкиДляБрендаПриИзмененииПосле(Элемент)

	am_ИзменитьНастройки(am_ЦеныПроцентНаценкиБренд, Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура am_ПроцентНаценкиДляБрендаПоУмолчаниюПриИзмененииПосле(Элемент)

	am_ИзменитьНастройки(am_ЦеныПроцентНаценкиБрендПоУмолчанию, Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура am_ЦеныВидЦенРозницаПриИзмененииПосле(Элемент)

	am_ИзменитьНастройки(am_ЦеныВидЦенРозница, Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура am_ЦеныВидЦенЗакупПриИзмененииПосле(Элемент)

	am_ИзменитьНастройки(am_ЦеныВидЦенЗакуп, Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура am_ФиксироватьОткудаПришёлКлиентПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ФиксироватьОткудаПришёлКлиент, "ФиксироватьОткудаПришёлКлиент");
	
КонецПроцедуры

&НаКлиенте
Процедура am_РазделМаркетингПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_РазделМаркетинг, Элемент.Имя);
	
	Если НЕ am_РазделМаркетинг Тогда am_АкцияСкидкаНаВторуюПокупку = Ложь КонецЕсли;
	
	ВидимостьИДоступностьОбъектовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура am_АкцияСкидкаНаВторуюПокупкуПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_АкцияСкидкаНаВторуюПокупку, Элемент.Имя);	
	
	ВидимостьИДоступностьОбъектовФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура am_am_ВидДисконтнойКартыПоУмолчаниюПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ВидДисконтнойКартыПоУмолчанию, Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура am_am_ПроцентКомиссииПоУмолчаниюПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ПроцентКомиссииПоУмолчанию, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_УслугаКомиссииПоУмолчаниюПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_УслугаКомиссииПоУмолчанию, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ОтборДеталейПоАвтомобилюПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_ОтборДеталейПоАвтомобилю, Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура am_УдержаниеКомиссииПриВозвратеПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(am_УдержаниеКомиссииПриВозврате, Элемент.Имя);	
	
КонецПроцедуры




//[2021.01.17] OBISOFT [obisoft_доработки] melniksv end


//[2021.01.17] OBISOFT [obisoft_доработки] melniksv begin	| 1С:Закуп

&НаКлиенте
Процедура zac_РазрешитьАссистентуСоздаватьЗаказыПоставщикамПриИзмененииПосле(Элемент)

	am_ИзменитьНастройки(zac_РазрешитьАссистентуСоздаватьЗаказыПоставщикам, Элемент.Имя);	
	
КонецПроцедуры



&НаКлиенте
Процедура zac_АссистентЗакупокПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(zac_АссистентЗакупок, Элемент.Имя);	
	
	Если НЕ zac_АссистентЗакупок Тогда
		zac_МинИМаксУровеньПоставки                         = Ложь;
		zac_РазрешитьАссистентуСоздаватьЗаказыПоставщикам 	= Ложь;
		
		am_ИзменитьНастройки(zac_МинИМаксУровеньПоставки, Элемент.Имя);
		am_ИзменитьНастройки(zac_РазрешитьАссистентуСоздаватьЗаказыПоставщикам, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура zac_МинИМаксУровеньПоставкиПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(zac_МинИМаксУровеньПоставки, Элемент.Имя);	
	
КонецПроцедуры

// Шате

&НаКлиенте
Процедура zac_РазрешитьЗагружатьСчетаФактурыЭксельПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_РазрешитьЗагружатьСчетаФактурыЭксель, Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура zac_ОбменСШате_МПлюсПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_ШатеМОбмен, Элемент.Имя);
	
	Если НЕ zac_ШатеМОбмен Тогда
		УстановитьГруппуОбменСШатеПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура zac_Поставщик_Шате_МПриИзмененииПосле(Элемент)
	
	am_ИзменитьНастройки(zac_ШатеМПоставщикПоУмолчанию, Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуОбменСШатеПоУмолчанию()
	zac_ШатеМПоставщикПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	zac_РазрешитьЗагружатьСчетаФактурыЭксель = Ложь;
	
	am_ИзменитьНастройки(zac_ШатеМПоставщикПоУмолчанию, 			"Поставщик_Шате_М");
	am_ИзменитьНастройки(zac_РазрешитьЗагружатьСчетаФактурыЭксель, 	"РазрешитьЗагружатьСчетаФактурыЭксель");	
КонецПроцедуры


//Гринлайт

&НаКлиенте
Процедура zac_ОбменСГринлайтПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_ГринлайтОбмен, Элемент.Имя);	
	
	Если НЕ zac_ГринлайтОбмен Тогда
		УстановитьГруппуОбменСГринлайтПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура zac_ПоставщикГринлайтПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_ГринлайтПоставщикПоУмолчанию, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура zac_ЗагружатьРеализациюТоваровИУслугЭксельПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_ЗагружатьРеализациюТоваровИУслугЭксель, Элемент.Имя);
КонецПроцедуры


&НаСервере
Процедура УстановитьГруппуОбменСГринлайтПоУмолчанию()
	zac_ГринлайтПоставщикПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	zac_ЗагружатьРеализациюТоваровИУслугЭксель = Ложь;
	
	am_ИзменитьНастройки(zac_ГринлайтПоставщикПоУмолчанию, 				"ПоставщикГринлайт");
	am_ИзменитьНастройки(zac_ЗагружатьРеализациюТоваровИУслугЭксель, 	"ЗагружатьРеализациюТоваровИУслугЭксель");	
КонецПроцедуры

// М-Авто

&НаКлиенте
Процедура zac_ОбменСМАвтоПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_МАвтоОбмен, Элемент.Имя);	
	
	Если НЕ zac_МАвтоОбмен Тогда
		УстановитьГруппуОбменСМАвтоПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура zac_ПоставщикМАвтоПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_МАвтоПоставщикПоУмолчанию, Элемент.Имя);
КонецПроцедуры


&НаКлиенте
Процедура zac_ЗагружатьУниверсальныйПредаточныйДокументПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_МАвтоЗагружатьУниверсальныйПредаточныйДокумент, Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуОбменСМАвтоПоУмолчанию()
	zac_МАвтоПоставщикПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	zac_МАвтоЗагружатьУниверсальныйПредаточныйДокумент = Ложь;
	
	am_ИзменитьНастройки(zac_МАвтоПоставщикПоУмолчанию, 						"ПоставщикМАвто");
	am_ИзменитьНастройки(zac_МАвтоЗагружатьУниверсальныйПредаточныйДокумент, 	"ЗагружатьУниверсальныйПредаточныйДокумент");	
КонецПроцедуры

// Берк

&НаКлиенте
Процедура zac_БеркОбменПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_ОбменСБерк, Элемент.Имя);	
	
	Если НЕ zac_ОбменСБерк Тогда
		УстановитьГруппуОбменСБеркПоУмолчанию();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура zac_ПоставщикБеркПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_БеркПоставщикПоУмолчанию, 	Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура zac_ЗагружатьExcelБеркПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(zac_БеркЗагружатьExcel, Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуОбменСБеркПоУмолчанию()
	zac_БеркПоставщикПоУмолчанию	= Справочники.Контрагенты.ПустаяСсылка();
	zac_БеркЗагружатьExcel 			= Ложь;
	
	am_ИзменитьНастройки(zac_БеркПоставщикПоУмолчанию, 	"ПоставщикБерк");
	am_ИзменитьНастройки(zac_БеркЗагружатьExcel, 		"ЗагружатьExcelБерк");	
КонецПроцедуры


//[2021.01.17] OBISOFT [obisoft_доработки] melniksv end

&НаКлиенте
Процедура am_ПоставщикОтображатьНомерКлиентаПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_ОтображатьНомерКлиентаУПоставщика, Элемент.Имя); 	
КонецПроцедуры

&НаКлиенте
Процедура am_ОтображатьРучнуюСкидкуПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_ОтображатьРучнуюСкидку, Элемент.Имя); 	
КонецПроцедуры

// Автоматическое проставление УСН

&НаКлиенте
Процедура am_ПроставлятьУСНРасходСоСчетаПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_ПроставлятьУСНРасходСоСчета, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура am_ПроставлятьУСНПоступлениеВКассуПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_ПроставлятьУСНПоступлениеВКассу, Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура am_ПроставлятьУСНПоступлениеНаСчетПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_ПроставлятьУСНПоступлениеНаСчет, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура am_ПроставлятьУСНРасходИзКассыПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_ПроставлятьУСНРасходИзКассы, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура am_ПроставлятьУСНРасходнаяНакладнаяВозвратПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_ПроставлятьУСНРасходнаяНакладнаяВозврат, Элемент.Имя);
КонецПроцедуры


// Автоматические заполнение по складам

&НаКлиенте
Процедура am_АвтоматическиЗаполнятьПоСкладамПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_АвтоматическиЗаполнятьПоСкладам, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура am_ГлавныйСкладДляЗаполненияПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ГлавныйСклад", am_ГлавныйСкладДляЗаполнения);
КонецПроцедуры

// Краска

&НаКлиенте
Процедура am_ОтображатьКнопкуРазливаКрасокПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ОтображатьКнопкуРазливаКраски", am_ОтображатьКнопкуРазливаКрасок);	
КонецПроцедуры

&НаКлиенте
Процедура am_ЕдиницаИзмеренияСоздаваемогоАналогаПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ЕдиницаИзмеренияСоздаваемогоАналога", am_ЕдиницаИзмеренияСоздаваемогоАналога);
КонецПроцедуры

//

&НаКлиенте
Процедура am_СверятьСкладСКассойККМВЧекеПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_СверятьСкладСКассойККМВЧеке", am_СверятьСкладСКассойККМВЧеке);
КонецПроцедуры

//

&НаКлиенте
Процедура am_am_ПоказыватьПредложениеПриОплатеПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ПоказыватьПредложениеПриОплате", am_ПоказыватьПредложениеПриОплате);	
КонецПроцедуры

&НаКлиенте
Процедура am_am_ТекстПредложенияПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ТекстПредложения", am_ТекстПредложения);	
КонецПроцедуры

//

&НаКлиенте
Процедура am_am_ОсновнаяОрганизацияПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ОсновнаяОрганизация", am_ОсновнаяОрганизация);
КонецПроцедуры

//

&НаКлиенте
Процедура am_am_ПроверятьОтветственногоВЧекеККМПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ПроверятьОтветственногоВЧекеККМ", am_ПроверятьОтветственногоВЧекеККМ);
КонецПроцедуры

//

&НаКлиенте
Процедура am_am_ПроверятьЗаполнениеСкладаВНоменклатуреПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_ПроверятьЗаполнениеСкладаВНоменклатуре", am_ПроверятьЗаполнениеСкладаВНоменклатуре);
КонецПроцедуры

&НаКлиенте
Процедура am_am_НеЗаполнятьСкладВНоменклатуреПоУмолчаниюПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_НеЗаполнятьСкладВНоменклатуреПоУмолчанию", am_НеЗаполнятьСкладВНоменклатуреПоУмолчанию);
КонецПроцедуры

//

&НаКлиенте
Процедура am_am_НеЗаполнятьНаправлениеДеятельностиПоУмолчаниюПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_НеЗаполнятьНаправлениеДеятельностиПоУмолчанию", am_НеЗаполнятьНаправлениеДеятельностиПоУмолчанию);
КонецПроцедуры

//

&НаКлиенте
Процедура am_am_УдалятьСимволыИзАртикулаПриИзмененииПосле(Элемент)
	УстановитьКонстанту("am_УдалятьСимволыИзАртикула", am_УдалятьСимволыИзАртикула);
КонецПроцедуры

#КонецОбласти

#Область Процедуры_и_функции

&НаКлиенте
Процедура am_am_Декорация22НажатиеПосле(Элемент)
	ОткрытьФорму("ОбщаяФорма.am_ОписаниеИзмененийДоработок");
КонецПроцедуры

&НаСервере
Процедура ПредзаполнимДанныеСправочниковПоУмолчанию()
	
	Справочники.am_Бренды.СоздатьБрендПоУмолчанию();
	
	Справочники.am_ТипДВС.СоздатьТипДВСПоУмолчанию();
	
	Справочники.am_ТипКПП.СоздатьТипКПППоУмолчанию();
	
	Элементы.am_ГруппаОсновная13.Видимость = Истина;
	Элементы.am_ГруппаОсновная14.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьИДоступностьОбъектовФормы()
	
	//Маркетинг
	Элементы.am_ГруппаОформление2.Видимость 	= am_АкцияСкидкаНаВторуюПокупку;
	Элементы.АкцияСкидкаНаВторуюПокупку.Доступность = am_РазделМаркетинг;
	
	//Цены
	Элементы.am_ГруппаОсновная13.Доступность 	= am_Цены;
	Элементы.ПроцентНаценкиДляБрендаПоУмолчанию.Видимость = am_ЦеныПроцентНаценкиБренд;
	Элементы.am_Декорация2.Видимость 			= am_ЦеныПроцентНаценкиБренд;
	
	Элементы.am_ГруппаНадпись11.Видимость	 	= am_УпущенныйСпрос;
	Элементы.ЗакупочнаяЦена.Доступность 		= am_СохранятьЦенуПокупкиПриПроведении;
	
	// Шате
	Элементы.zac_ГруппаНадпись17.Доступность = zac_ШатеМОбмен;
	Элементы.zac_ГруппаНадпись17.Видимость = zac_ШатеМОбмен;
	
	// Гринлайт
	Элементы.zac_ГруппаНадпись18.Доступность = zac_ГринлайтОбмен;
	Элементы.zac_ГруппаНадпись18.Видимость = zac_ГринлайтОбмен;
	
	// МАвто
	Элементы.zac_ГруппаНадпись19.Доступность = zac_МАвтоОбмен;
	Элементы.zac_ГруппаНадпись19.Видимость = zac_МАвтоОбмен;
	
	// Берк
	Элементы.zac_ГруппаНадпись16.Доступность = zac_ОбменСБерк;
	Элементы.zac_ГруппаНадпись16.Видимость = zac_ОбменСБерк;

	
КонецПроцедуры

&НаСервере
Процедура am_ИзменитьНастройки(Результат, Наименование)
	
	РегистрыСведений.am_ХранилищеНастроек.УстановитьЗначение(Наименование, Результат);
	
	ВидимостьИДоступностьОбъектовФормы();
	
КонецПроцедуры

&НаСервере
Процедура am_ОбновитьНастройкиНаСервере()
	
	//Маркетинг
	am_РазделМаркетинг          			= РегистрыСведений.am_ХранилищеНастроек.ПолучитьДоступКМаркетингу();
	//Акция "На вторую покупку скидка 5% - 30%
	am_ВидДисконтнойКартыПоУмолчанию       	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидДисконтнойКартыПоУмолчанию();
	am_АкцияСкидкаНаВторуюПокупку          	= РегистрыСведений.am_ХранилищеНастроек.АкцияДоступнаСкидкаНаВторуюПокупку();
	
	//Цены
	am_Цены          						= РегистрыСведений.am_ХранилищеНастроек.ПолучитьБлокЦены();
	am_ЦеныПроцентНаценкиБренд              = РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешитьПроцентНаценкиВБрендах();
	am_ЦеныПроцентНаценкиБрендПоУмолчанию 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроцентНаценкиВБрендахПоУмолчанию();
	
	am_ЦеныВидЦенРозница              		= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидЦенРозница();
	am_ЦеныВидЦенЗакуп 						= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидЦенЗакуп();
	
	am_ЗакупочнаяЦена					 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидЦенДляРегистрацииПрихода();
	
	//Упущенный спрос
	am_УпущенныйСпрос						= РегистрыСведений.am_ХранилищеНастроек.ПолучитьУпущенныйСпрос();
	am_УпущенныйСпросНФС					= РегистрыСведений.am_ХранилищеНастроек.ПолучитьУпущенныйСпросНФС();
	am_УпущенныйСпросНФП					= РегистрыСведений.am_ХранилищеНастроек.ПолучитьУпущенныйСпросНФП();
	
	//Обмен с СХКД
	am_ОбменССТО                            = РегистрыСведений.am_ХранилищеНастроек.ПолучитьОбменССТО();
	
	//Прочее
	am_ПульсБизнеса						 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПульсБизнесаБазовыеНастройки();
	
	//Номенклатура
	am_УпрощеннаяФормаНоменклатуры			= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПростаяФормаКарточкиНоменклатуры();
	am_ОтборДеталейПоАвтомобилю             = РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеОтбораДеталейПоАвтомобилю();
	
	//Заказ покупателя
	am_НижеЗакупочнойЗП						= РегистрыСведений.am_ХранилищеНастроек.ПолучитьКонтрольНижеЗакупаЗаказПокупателя();
	am_АвтоВЗП					 			= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазмещениеАвтоВЗП();
	am_ТЧЗаказаПокупателяПоказатьАртикул 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидимостьТЧЗаказаПокупателяПоказатьАртикул();
	am_ТЧЗаказаПокупателяПоказатьБренд    	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидимостьТЧЗаказаПокупателяПоказатьБренд();
	am_ТЧЗаказаПокупателяПоказатьКатегории	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидимостьТЧЗаказаПокупателяПоказатьКатегории();
	am_ТЧЗаказаПокупателяПоказатьПоставщика	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьВидимостьТЧЗаказаПокупателяПоказатьПоставщика();
	
	//ЧекККМ
	am_НижеЗакупочнойЧККМ					= РегистрыСведений.am_ХранилищеНастроек.ПолучитьКонтрольНижеЗакупаЧекККМ();
	am_ФиксироватьОткудаПришёлКлиент        = РегистрыСведений.am_ХранилищеНастроек.ПолучитьИсточникОбращения();
	am_АвтоВЧККМ					 		= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазмещениеАвтоВЧККМ();     
	am_ДоступностьОстаткиИРезервыЧекККМ	 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьДоступностьОстаткиИРезервыЧекККМ();
	
	//Расходная накладная
	am_НижеЗакупочнойРН						= РегистрыСведений.am_ХранилищеНастроек.ПолучитьКонтрольНижеЗакупаРН();
	
	//Приходная накладная
	am_СохранятьЦенуПокупкиПриПроведении	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьСохранятьЦенуПокупкиПриПроведении();
	
	//РМК
	am_УдержаниеКомиссииПриВозврате			= РегистрыСведений.am_ХранилищеНастроек.РазрешитьУдерживатьКомиссиюПриВозвратеТовара();
	am_ПроцентКомиссииПоУмолчанию           = РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроцентКомиссииПоУмолчанию();
	am_УслугаКомиссииПоУмолчанию            = РегистрыСведений.am_ХранилищеНастроек.ПолучитьУслугуКомиссииПоУмолчанию();
	
	//Ценник
	am_Шаблон								= РегистрыСведений.am_ХранилищеНастроек.ПолучитьШаблон();
	
	//1С:Закуп
	//Ассистент закупок
	zac_АссистентЗакупок                                = РегистрыСведений.am_ХранилищеНастроек.ПолучитьСостояниеАктивацииАссистентаЗакупок();
	zac_МинИМаксУровеньПоставки                         = РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеНаУстановкуМинИМаксУровеньПоставки();
	zac_РазрешитьАссистентуСоздаватьЗаказыПоставщикам 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешитьАссистентуСоздаватьЗаказыПоставщикам();
	
	
	
	//Шате-М Плюс
	zac_ШатеМОбмен                    		= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеОбменСШите_МПлюс();
	zac_РазрешитьЗагружатьСчетаФактурыЭксель = РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеЗагружатьСчетаФактурыЭксель();
	zac_ШатеМПоставщикПоУмолчанию           = РегистрыСведений.am_ХранилищеНастроек.ПолучитьШите_МПлюсПоУмолчанию();
	
	// Гринлайт
	zac_ГринлайтОбмен 						= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеОбменСГринлайт();
	zac_ЗагружатьРеализациюТоваровИУслугЭксель = РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеЗагружатьРеализациюТоваровИУслугЭксель();
	zac_ГринлайтПоставщикПоУмолчанию		= РегистрыСведений.am_ХранилищеНастроек.ПолучитьГринлайтПоУмолчанию();
	
	// МАвто
	zac_МАвтоОбмен 										= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеОбменСМАвто();
	zac_МАвтоЗагружатьУниверсальныйПредаточныйДокумент 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеЗагружатьУниверсальныйПредаточныйДокумент();
	zac_МАвтоПоставщикПоУмолчанию						= РегистрыСведений.am_ХранилищеНастроек.ПолучитьМАвтоПоУмолчанию();
	
	// Берк
	zac_ОбменСБерк					= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеОбменСБерк();
	zac_БеркЗагружатьExcel			= РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазрешениеЗагружатьExcelБерк();
	zac_БеркПоставщикПоУмолчанию	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьБеркПоУмолчанию();
	
	//
	
	am_ОтображатьНомерКлиентаУПоставщика = РегистрыСведений.am_ХранилищеНастроек.ПолучитьОтображатьНомерКлиентаУПоставщика();
	
	am_ОтображатьРучнуюСкидку = РегистрыСведений.am_ХранилищеНастроек.ПолучитьОтображатьРучнуюСкидку();
		
	// Автоматическое проставление УСН
	
	am_ПроставлятьУСНПоступлениеВКассу 			= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроставлятьУСНПоступлениеВКассу();
	am_ПроставлятьУСНПоступлениеНаСчет 			= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроставлятьУСНПоступлениеНаСчет();
	am_ПроставлятьУСНРасходИзКассы 				= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроставлятьУСНРасходИзКассы();
	am_ПроставлятьУСНРасходнаяНакладнаяВозврат 	= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроставлятьУСНРасходнаяНакладнаяВозврат();
	am_ПроставлятьУСНРасходСоСчета 				= РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроставлятьУСНРасходСоСчета();
	
	// Автоматическое заполнение по складам
	
	am_АвтоматическиЗаполнятьПоСкладам			= РегистрыСведений.am_ХранилищеНастроек.ПолучитьАвтоматическиЗаполнятьПоСкладам();
	am_ГлавныйСкладДляЗаполнения 				= Константы.am_ГлавныйСклад.Получить();
	
	// Краски
	
	am_ОтображатьКнопкуРазливаКрасок = Константы.am_ОтображатьКнопкуРазливаКраски.Получить();
	am_ЕдиницаИзмеренияСоздаваемогоАналога = Константы.am_ЕдиницаИзмеренияСоздаваемогоАналога.Получить();
	
	//
	
	am_СверятьСкладСКассойККМВЧеке = Константы.am_СверятьСкладСКассойККМВЧеке.Получить();
	
	//
	
	am_ПоказыватьПредложениеПриОплате = Константы.am_ПоказыватьПредложениеПриОплате.Получить();
	am_ТекстПредложения = Константы.am_ТекстПредложения.Получить();
	
	//
	
	am_ОсновнаяОрганизация = Константы.am_ОсновнаяОрганизация.Получить();
	
	//
	
	am_ПроверятьОтветственногоВЧекеККМ = Константы.am_ПроверятьОтветственногоВЧекеККМ.Получить();
	
	//
	
	am_ПроверятьЗаполнениеСкладаВНоменклатуре = Константы.am_ПроверятьЗаполнениеСкладаВНоменклатуре.Получить();
	
	am_НеЗаполнятьСкладВНоменклатуреПоУмолчанию = Константы.am_НеЗаполнятьСкладВНоменклатуреПоУмолчанию.Получить();
	
	//
	
	am_НеЗаполнятьНаправлениеДеятельностиПоУмолчанию = Константы.am_НеЗаполнятьНаправлениеДеятельностиПоУмолчанию.Получить();
	
	//
	
	am_УдалятьСимволыИзАртикула = Константы.am_УдалятьСимволыИзАртикула.Получить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКонстанту(НаименованиеКонстанты, ЗначениеКонстанты)
	Константы[НаименованиеКонстанты].Установить(ЗначениеКонстанты);	
КонецПроцедуры

&НаКлиенте
Процедура am_am_ШаблонПриИзмененииПосле(Элемент)
	am_ИзменитьНастройки(am_Шаблон, Элемент.Имя);	
	ВидимостьИДоступностьОбъектовФормы();
КонецПроцедуры


//

&НаСервере
&Вместо("БСП__ИПП__ПриСозданииНаСервере")
Процедура am_БСП__ИПП__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтоАдминистраторСистемы   = Пользователи.ЭтоПолноправныйПользователь(, Истина);
	РазделениеВключено        = ОбщегоНазначения.РазделениеВключено();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	Элементы.ГруппаКлассификаторы.Видимость = Не РазделениеВключено;
	
	Если Элементы.ГруппаКлассификаторы.Видимость Тогда		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			Если МодульАдресныйКлассификаторСлужебный.ЕстьПравоДобавлениеИзменениеАдресныхСведений() Тогда
				СведенияОДоступностиАдресныхСведений = МодульАдресныйКлассификаторСлужебный.СведенияОДоступностиАдресныхСведений();
				АдресныйКлассификаторСодержитЗагруженныеСведения = СведенияОДоступностиАдресныхСведений.Получить("ЕстьЗагруженныеСведения") = Истина;
				
				// +Доработка
				Если Элементы.Найти("РегистрСведенийАдресныеОбъектыОчиститьАдресныйКлассификатор") <> Неопределено Тогда
				// -Доработка 
					Элементы.РегистрСведенийАдресныеОбъектыОчиститьАдресныйКлассификатор.Доступность = АдресныйКлассификаторСодержитЗагруженныеСведения;					
				// +Доработка
				КонецЕсли
				// -Доработка
			Иначе
				Элементы.АдресныйКлассификаторНастройки.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.АдресныйКлассификаторНастройки.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		Элементы.ГруппаОбработкаЗагрузкаКурсовВалют.Видимость =
			  Не РазделениеВключено
			И Не ЭтоАвтономноеРабочееМесто;
	Иначе
		Элементы.ГруппаОбработкаЗагрузкаКурсовВалют.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СклонениеПредставленийОбъектов") Тогда
		Элементы.ГруппаСклонения.Видимость =
			  Не РазделениеВключено
			И Не ЭтоАвтономноеРабочееМесто
			И ЭтоАдминистраторСистемы;
	Иначе
		Элементы.ГруппаСклонения.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВызовОнлайнПоддержки") Тогда
		Элементы.ГруппаИнтеграцияВызовОнлайнПоддержки.Видимость =
			ОбщегоНазначения.ЭтоWindowsКлиент();
	Иначе
		Элементы.ГруппаИнтеграцияВызовОнлайнПоддержки.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Элементы.ГруппаЦентрМониторинга.Видимость = ЭтоАдминистраторСистемы;
		Если ЭтоАдминистраторСистемы Тогда
			ПараметрыЦентраМониторинга = БСП__ИПП__ПолучитьПараметрыЦентраМониторинга();
			ЦентрМониторингаРазрешитьОтправлятьДанные = БСП__ИПП__ПолучитьПереключательОтправкиДанных(ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга, ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме);
			
			ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
			Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
				ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
				ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
				ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
			ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
				ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
				ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
				ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
			ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
				ПараметрыСервиса = Неопределено;
			КонецЕсли;
			
			Если ПараметрыСервиса <> Неопределено Тогда
				Если ПараметрыСервиса.Порт = 80 Тогда
					Схема = "http://";
					Порт = "";
				ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
					Схема = "https://";
					Порт = "";
				Иначе
					Схема = "http://";
					Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
				КонецЕсли;
				
				ЦентрМониторингаАдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
			Иначе
				ЦентрМониторингаАдресСервиса = "";
			КонецЕсли;
			
			Элементы.ЦентрМониторингаАдресСервиса.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные = 1);
			Элементы.ЦентрМониторингаНастройки.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные <> 2);
			Элементы.ГруппаОтправитьКонтактнуюИнформацию.Видимость = ПараметрыЦентраМониторинга.ЗапросКонтактнойИнформации <> 2;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЦентрМониторинга.Видимость = Ложь;
	КонецЕсли;
	
	ВидимостьГруппыВнешниеКомпоненты = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеКомпоненты") Тогда 
		
		МодульВнешниеКомпонентыСлужебный = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСлужебный");
		ВидимостьГруппыВнешниеКомпоненты = МодульВнешниеКомпонентыСлужебный.ДоступнаЗагрузкаСПортала();
		
	КонецЕсли;
	
	Элементы.ГруппаВнешниеКомпоненты.Видимость = ВидимостьГруппыВнешниеКомпоненты;
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
	ОбрабатыватьНастройкиБИП = ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей");
	
	Если ОбрабатыватьНастройкиБИП Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(ЭтотОбъект);
	Иначе
		Элементы.БИПГруппаНастройки.Видимость                 = Ложь;
		Элементы.БИПГруппаНовости.Видимость                   = Ложь;
		Элементы.БИПГруппаОбновлениеПрограммы.Видимость       = Ложь;
		Элементы.БИПГруппаОбновлениеКлассификаторов.Видимость = Ложь;
		Элементы.БИПГруппаПроверкаКонтрагентов.Видимость      = Ложь;
		Элементы.БИПГруппаСПАРКРиски.Видимость                = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОбсуждения.Видимость = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения");
КонецПроцедуры

&НаСервере
&Вместо("ОпределитьДоступностьПоПравам")
Процедура am_ОпределитьДоступностьПоПравам()
	ЭтоПолноправныйПользователь = РежимРаботы.ЭтоАдминистраторПрограммы ИЛИ РежимРаботы.ЭтоАдминистраторСистемы
	//+Доработка
	ИЛИ Пользователи.РолиДоступны("am_Руководитель", ПараметрыСеанса.ТекущийПользователь);
	//-Доработка
	
	Если ЭтоПолноправныйПользователь Тогда
		//+Доработка
		Элементы.БСП__Обсл__ГруппаОбработкаГрупповоеИзменениеОбъектов.Видимость = Истина;
		//-Доработка
		Возврат;
	КонецЕсли;
	
	НедоступныеРазделы = Новый Массив;
	НедоступныеРазделы.Добавить(Элементы.СтраницаКомпания);
	НедоступныеРазделы.Добавить(Элементы.СтраницаCRM);
	НедоступныеРазделы.Добавить(Элементы.СтраницаПродажи);
	НедоступныеРазделы.Добавить(Элементы.СтраницаЗакупки);
	НедоступныеРазделы.Добавить(Элементы.СтраницаРаботы);
	НедоступныеРазделы.Добавить(Элементы.СтраницаПроизводство);
	НедоступныеРазделы.Добавить(Элементы.СтраницаДеньги);
	НедоступныеРазделы.Добавить(Элементы.СтраницаЗарплата);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСПрограммами1СиРИБ);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСМобильнымПриложением);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиОбменССайтом);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиЯндексДоставка);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиБизнесСеть);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументами1СНоменклатура);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиОбменСКонтрагентами);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиОбменСБанками);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиИнтеграцияСЮKassa);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеВерсионированиеОбъектов);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеДополнительныеРеквизиты);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеЗащитаПерсональныхДанных);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеИнтернетПоддержкаИСервисы);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеКонтактнаяИнформация);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеКорректировкаДанных);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеМониторингОценкаПроизводительности);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеНастройкиПользователейИПрав);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеОбщиеНастройки);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеПечатныеФормыОтчетыИОбработки);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеОбслуживание);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеПодключаемоеОборудование);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеПочтаСмс);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеРаботаВСервисе);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеНастройкиРаботыСФайлами);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеОрганайзер);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеСинхронизацияДанных);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеРегламентныеОперации);
	
	Для каждого Раздел Из НедоступныеРазделы Цикл
		Для каждого ЭлементФормы Из Раздел.ПодчиненныеЭлементы Цикл
			ЭлементФормы.Доступность = Ложь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры












































#КонецОбласти
