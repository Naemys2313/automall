
&После("ЗаполнитьПоЧекуККМ")
Процедура АМ_ЗаполнитьПоЧекуККМ(ДанныеЗаполнения) 
	
	Если НЕ ДанныеЗаполнения.ОперацияСДенежнымиСредствами Тогда
		Если ЭтотОбъект.Предоплата.Количество() > 0 Тогда
			Если ТипЗнч(ЭтотОбъект.Предоплата[0].Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
				Если ЭтотОбъект.Предоплата[0].Документ.БезналичнаяОплата.Количество() > 0 Тогда
					ЭтотОбъект.БезналичнаяОплата.Очистить();
					СтрокаБО = ЭтотОбъект.БезналичнаяОплата.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаБО, ЭтотОбъект.Предоплата[0].Документ.БезналичнаяОплата[0]);
					СтрокаБО.Сумма = ЭтотОбъект.СуммаДокумента;
					СтрокаБО.ОплатаОтменена = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЭтотОбъект.Предоплата.Очистить();
	КонецЕсли;
	После_ЗаполнитьПоЧекуККМ(ДанныеЗаполнения);
КонецПроцедуры

Процедура После_ЗаполнитьПоЧекуККМ(ДанныеЗаполнения) 
	//Откорректируем таблицу товаров на возврат и сумму итоговую.
	//Заполним ее по разнице номенклатур между КП и уменьшим на сумму удержания
	//Если КП больше одного то необходимо корректировать
	Если НЕ ЭтотОбъект.Заказ.Пустая() Тогда
		Если ЭтотОбъект.Заказ.КоличествоВариантовКП = 2 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Заказ",ЭтотОбъект.Заказ);
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
			|	ЗаказПокупателяЗапасы.Количество КАК Количество
			|ПОМЕСТИТЬ ВТ_ТаблицаИсключения
			|ИЗ
			|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
			|ГДЕ
			|	ЗаказПокупателяЗапасы.Ссылка = &Заказ
			|	И ЗаказПокупателяЗапасы.НомерВариантаКП = 2
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
			|	ЗаказПокупателяЗапасы.Количество - ЕСТЬNULL(ВТ_ТаблицаИсключения.Количество, 0) КАК Количество,
			|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
			|	ЗаказПокупателяЗапасы.Партия КАК Партия,
			|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЗаказПокупателяЗапасы.Цена КАК Цена,
			|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
			|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
			|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
			|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
			|	ЗаказПокупателяЗапасы.Всего КАК Всего,
			|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
			|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
			|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
			|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
			|	ЗаказПокупателяЗапасы.СерийныеНомера КАК СерийныеНомера,
			|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
			|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
			|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости,
			|	ЗаказПокупателяЗапасы.am_ПроцентУдержания КАК am_ПроцентУдержания
			|ИЗ
			|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаИсключения КАК ВТ_ТаблицаИсключения
			|		ПО (ЗаказПокупателяЗапасы.Номенклатура = ВТ_ТаблицаИсключения.Номенклатура)
			|ГДЕ
			|	ЗаказПокупателяЗапасы.Ссылка = &Заказ
			|	И ЗаказПокупателяЗапасы.НомерВариантаКП = 1
			|	И ЗаказПокупателяЗапасы.Количество - ЕСТЬNULL(ВТ_ТаблицаИсключения.Количество, 0) <> 0";
			Результат = Запрос.Выполнить().Выгрузить();
			Для каждого СтрокаРезультата из Результат Цикл
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Количество", СтрокаРезультата.Количество);
				ДанныеСтроки.Вставить("Цена", СтрокаРезультата.Цена * СтрокаРезультата.am_ПроцентУдержания / 100);
				ДанныеСтроки.Вставить("Сумма", 0);
				ДанныеСтроки.Вставить("СтавкаНДС", СтрокаРезультата.СтавкаНДС);
				ДанныеСтроки.Вставить("СуммаНДС", 0);
				ДанныеСтроки.Вставить("СуммаВключаетНДС", ЭтотОбъект.Заказ.СуммаВключаетНДС);
				ДанныеСтроки.Вставить("Всего", 0);
				ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", 0);
				ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
				
				ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
				
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ДанныеСтроки);
			КонецЦикла;
			ЭтотОбъект.Запасы.Очистить();
			ЭтотОбъект.Запасы.Загрузить(Результат);
			ЭтотОбъект.СуммаДокумента = ЭтотОбъект.Запасы.Итог("Всего");
		КонецЕсли;
	КонецЕсли;
КонецПРоцедуры	

&Вместо("ОбработкаПроверкиЗаполнения")
Процедура am_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.Проведен КАК Проведен,
	|	ЧекККМ.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &ЧекККМ";
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТекущийПользовательТехПоддержка = ПараметрыСеанса.ТекущийПользователь.am_ТехПоддержка;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Проведен И НЕ ТекущийПользовательТехПоддержка Тогда
			ТекстСообщения = НСтр("ru='Чек ККМ не проведен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЧекККМ", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.НомерЧекаККМ) И НЕ ТекущийПользовательТехПоддержка Тогда
			ТекстСообщения = НСтр("ru='Чек ККМ продажи не пробит.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЧекККМ", , Отказ);
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Кассовая смена не открыта.'");
		Если Не РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстСообщения) И НЕ ТекущийПользовательТехПоддержка Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КассоваяСмена", , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаЗапасы.Цена * СтрокаЗапасы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаЗапасы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Запасы"".'"),
					СтрокаЗапасы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"Сумма");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Серийные номера
	РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Запасы, СерийныеНомера, СтруктурнаяЕдиница, ЭтотОбъект);
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	// ПодарочныеCертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"".
								  |Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Запасы", Отказ);
	// Конец ПодарочыеСертификаты
	
	// Контроль сумм в табличных частях
	Если ОперацияСДенежнымиСредствами Тогда
		СуммаДляКонтроля = СуммаДокумента;
	Иначе
		СуммаДляКонтроля = Запасы.Итог("Всего");
	КонецЕсли;
	Если СуммаДляКонтроля < БезналичнаяОплата.Итог("Сумма") Тогда
		ТекстСообщения = НСтр("ru = 'Сумма безналичной оплаты больше суммы документа.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
	КонецЕсли;
	// Конец Контроль сумм в табличных частях
	
	// Бонусы
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы") Тогда
		Если Не БезналичнаяОплата.Найти(Перечисления.ВидыБезналичныхОплат.Бонусы, "ВидОплаты") = Неопределено Тогда
			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БезналичнаяОплата.Сумма"));
			
			Для Каждого СтрокаОплаты Из БезналичнаяОплата Цикл
				
				Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
					Если Не ЗначениеЗаполнено(СтрокаОплаты.СуммаБонусов) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 не указана сумма оплаты.'"),
							СтрокаОплаты.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки, "СуммаБонусов");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаОплаты.Сумма) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 не указана сумма оплаты.'"),
							СтрокаОплаты.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки, "Сумма");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	// Конец Бонусы
	
	Если Не ОперацияСДенежнымиСредствами Тогда
		Если Предоплата.Количество() = 0 Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Курс");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кратность");
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияГосИС
	Если ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Обувь) Тогда
		ИнтеграцияИСУНФ.ПроверитьЗаполнениеАкцизныхМарок(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
КонецПроцедуры

&Вместо("ОбработкаПроведения")
Процедура am_ОбработкаПроведения(Отказ, РежимПроведения)
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь);
	
	ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЧекККМВозврат.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	
	// +Доработка
	Если НЕ ЭтотОбъект.am_НеВозвращатьДеньги Тогда 
	// -Доработка
		ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредстваВКассахККМ", ТаблицыДляДвижений, Движения, Отказ);
		
	// +Доработка	
	КонецЕсли;
	// -Доработка

	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	// АвтоматическиеСкидки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПредоставленныеСкидки", ТаблицыДляДвижений, Движения, Отказ);
	// Эквайринг
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПлатежнымиКартами", ТаблицыДляДвижений, Движения, Отказ);
	// Заказы покупателей в розничной торговле
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерийныеНомераГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерийныеНомера", ТаблицыДляДвижений, Движения, Отказ);
	
	// Подарочные сертификаты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПодарочнымиСертификатами", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	
	// Бонусы
	ПроведениеДокументовУНФ.ОтразитьДвижения("БонусныеБаллы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("НачисленияБонусныхБаллов", ТаблицыДляДвижений, Движения, Отказ);
	
	АссистентУправленияПриСрабатыванииСобытия();
	
	// Акцизные марки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОстаткиАлкогольнойПродукцииЕГАИС", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ЧекККМВозврат.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры
