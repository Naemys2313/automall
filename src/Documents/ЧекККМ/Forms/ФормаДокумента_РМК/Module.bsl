
&НаСервере
&После("ИнициализацияФормы")
Процедура am_ИнициализацияФормы(пПриСозданииНаСервере)
	
	Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН И ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		//Объект.Патент = Объект.КассаККМ.am_Патент;
	КонецЕсли;
	
	Элементы.Скидки.Видимость = РегистрыСведений.am_ХранилищеНастроек.ПолучитьОтображатьРучнуюСкидку();
	Элементы.am_РазлитьКраску.Видимость = Константы.am_ОтображатьКнопкуРазливаКраски.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура am_КонтрагентПриИзмененииПосле(Элемент)
	
	Объект.am_Автомобиль = am_МастерКлиентВызовСервера.ПодборАвто(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура am_КонтрагентИзменениеТекстаРедактированияПосле(Элемент, Текст, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура am_КонтрагентАвтоПодборПосле(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	am_МастерКлиентКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНоваяКартой(ТипыДенежныхСредств)
	Если ПолучитьАвтоматическиЗаполнятьПоСкладам() Тогда
		am_ЗаполнитьПоОстаткамИРезервамВсеСкладыВместо(Неопределено);
	КонецЕсли;
	// РаспределениеПродаж
	Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
		НуженПересчет = ЗагрузитьСледующийРаспределенныйЧек();
		Если НуженПересчет Тогда
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
	Иначе
		Если РаспределениеНоменклатурыНастроено Тогда
			РассчитатьСкидкиНаценки(Команды.РассчитатьСкидкиНаценки);
			РаспределитьЗапасыПоЧекам();
			Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
				ЗапретПересчетаСкидок = Истина;
				ЭтоПервыйЧек = Истина;
				НуженПересчет = ЗагрузитьСледующийРаспределенныйЧек(ЭтоПервыйЧек);
				Если НуженПересчет Тогда
					ПересчитатьДокументНаКлиенте();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец РаспределениеПродаж
	
	ПроверитьСостояниеКассовойСмены();
	
	// Бонусы
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		РассчитатьБонусыНаКлиенте();
	КонецЕсли;
	// Конец Бонусы
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, ПолучитьСтрокуРеквизитыИсключения());
		Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		СуммаДляПроверки = Объект.СуммаДокумента;
	Иначе
		СуммаДляПроверки = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	
	СуммаДоРасчетаАвтоСкидок = СуммаДляПроверки;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() > 0 И Не Объект.СкидкиРассчитаны И Не ЗапретПересчетаСкидок Тогда
			РассчитатьСкидкиНаценки(Команды.РассчитатьСкидкиНаценки);
		КонецЕсли;
	КонецЕсли;
	
	// Вызовем проверку документа, т.к. есть ещё более специфичные проверки, например, серийных номеров.
	НужноОбновитьФормуСписка = Ложь;
	Если НЕ ПроверкаЗаполненияПрошлаУспешно(НужноОбновитьФормуСписка) Тогда
		Возврат;
	КонецЕсли;
	Если НужноОбновитьФормуСписка Тогда
		ПараметрОповещения = Новый Структура("НеОбновлятьОстатокВКассе", Истина);
		ОбновитьФормуСпискаДокументовНаКлиенте(ПараметрОповещения);
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.Предоплата.Очистить();
	КонецЕсли;
	
	Если СуммаДляПроверки <= 0 И Не Объект.ОперацияСДенежнымиСредствами Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОплатитьОбработкаОтветаНаВопрос", ЭтотОбъект, Новый Структура("СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств", СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств)),
			НСтр("ru = 'Сумма к оплате = 0! Уверены, что нужно продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Запрос о подтверждении действия'"));
	Иначе
		ОплатитьФрагментНоваяКартой(СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьФрагментНоваяКартой(СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств)
	Оповещение = Новый ОписаниеОповещения("ОплатитьЗавершение", ЭтаФорма);
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("БезналичнаяОплата", Объект.БезналичнаяОплата);
	СтруктураПараметров.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ВидыКарт", Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора);
	СтруктураПараметров.Вставить("КассаККМ", КассаККМ);
	СтруктураПараметров.Вставить("ИспользоватьПодключаемоеОборудование", ИспользоватьПодключаемоеОборудование);
	СтруктураПараметров.Вставить("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	СтруктураПараметров.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	СтруктураПараметров.Вставить("СуммаДоРасчетаАвтоСкидок", СуммаДоРасчетаАвтоСкидок);
	СтруктураПараметров.Вставить("ТипыДенежныхСредств", ТипыДенежныхСредств);
	СтруктураПараметров.Вставить("Заказ", Объект.Заказ);
	СтруктураПараметров.Вставить("СписокЧековКОплате", СписокРаспределенныхЧеков);
	СтруктураПараметров.Вставить("Сдача", Сдача);
	СтруктураПараметров.Вставить("СформироватьТоварныйЧек", ПечататьТоварныйЧекПоУмолчанию);
	
	Форма = ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаОплаты", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	
	Объект.ФормаОплаты = ТипыДенежныхСредствБезналичные;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставЧеков", "Доступность", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗапасыИтогСумма", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СуммаДокумента", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаКнопки", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОК", "КнопкаПоУмолчанию", Истина);
	
	Форма.Элементы.ГруппаОплата.ТекущаяСтраница = Форма.Элементы.ГруппаОплатаКартой;
	Форма.Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Форма.Элементы.ГруппаОплатаКартой.Видимость = Истина;
	Форма.Элементы.ГруппаКнопки_2_МК.Видимость = Ложь;
	
	Форма.ВидКартыОплатаКартой = "Сбербанк";
	Форма.Элементы.ВидКартыОплатаКартой.Доступность = Ложь;
	
	Форма.Элементы.ПередатьНаТерминал.Видимость = НЕ Форма.ЭквайринговыйТерминал.Пустая() И Форма.Элементы.ЭквайринговыйТерминал.Видимость; // TODO. Должно зависеть от того, сколько терминалов и подключен терминал или нет.
	Форма.Элементы.ДекорацияДанныеПереданыНаТерминал.Видимость = Ложь;
	
	Форма.Элементы.НомерКартыОплатаКартой.Доступность = Форма.ЭквайринговыйТерминал.Пустая() И НЕ Объект.ЭквайринговыйТерминал.Пустая();
	Форма.Элементы.НомерЧекаЭТОплатаКартой.Доступность = Форма.Элементы.НомерКартыОплатаКартой.Доступность;
	Форма.Элементы.СсылочныйНомерОплатаКартой.Доступность = Форма.Элементы.НомерКартыОплатаКартой.Доступность;
		
	Форма.Элементы.ДекорацияДанныеПереданыНаТерминал.Видимость = Истина;
	Форма.Элементы.ПередатьНаТерминал.Видимость = Ложь;
	Форма.Элементы.ЭквайринговыйТерминал_МК.Доступность = Ложь;
	Форма.am_ДобавитьОплатуКартой(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНоваяНаличкой(ТипыДенежныхСредств)
	Если ПолучитьАвтоматическиЗаполнятьПоСкладам() Тогда
		am_ЗаполнитьПоОстаткамИРезервамВсеСкладыВместо(Неопределено);
	КонецЕсли;
	// РаспределениеПродаж
	Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
		НуженПересчет = ЗагрузитьСледующийРаспределенныйЧек();
		Если НуженПересчет Тогда
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
	Иначе
		Если РаспределениеНоменклатурыНастроено Тогда
			РассчитатьСкидкиНаценки(Команды.РассчитатьСкидкиНаценки);
			РаспределитьЗапасыПоЧекам();
			Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
				ЗапретПересчетаСкидок = Истина;
				ЭтоПервыйЧек = Истина;
				НуженПересчет = ЗагрузитьСледующийРаспределенныйЧек(ЭтоПервыйЧек);
				Если НуженПересчет Тогда
					ПересчитатьДокументНаКлиенте();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец РаспределениеПродаж
	
	ПроверитьСостояниеКассовойСмены();
	
	// Бонусы
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		РассчитатьБонусыНаКлиенте();
	КонецЕсли;
	// Конец Бонусы
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, ПолучитьСтрокуРеквизитыИсключения());
		Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		СуммаДляПроверки = Объект.СуммаДокумента;
	Иначе
		СуммаДляПроверки = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	
	СуммаДоРасчетаАвтоСкидок = СуммаДляПроверки;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() > 0 И Не Объект.СкидкиРассчитаны И Не ЗапретПересчетаСкидок Тогда
			РассчитатьСкидкиНаценки(Команды.РассчитатьСкидкиНаценки);
		КонецЕсли;
	КонецЕсли;
	
	// Вызовем проверку документа, т.к. есть ещё более специфичные проверки, например, серийных номеров.
	НужноОбновитьФормуСписка = Ложь;
	Если НЕ ПроверкаЗаполненияПрошлаУспешно(НужноОбновитьФормуСписка) Тогда
		Возврат;
	КонецЕсли;
	Если НужноОбновитьФормуСписка Тогда
		ПараметрОповещения = Новый Структура("НеОбновлятьОстатокВКассе", Истина);
		ОбновитьФормуСпискаДокументовНаКлиенте(ПараметрОповещения);
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.Предоплата.Очистить();
	КонецЕсли;
	
	Если СуммаДляПроверки <= 0 И Не Объект.ОперацияСДенежнымиСредствами Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОплатитьОбработкаОтветаНаВопрос", ЭтотОбъект, Новый Структура("СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств", СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств)),
			НСтр("ru = 'Сумма к оплате = 0! Уверены, что нужно продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Запрос о подтверждении действия'"));
	Иначе
		ОплатитьФрагментНоваяНаличкой(СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьФрагментНоваяНаличкой(СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств)
	Оповещение = Новый ОписаниеОповещения("ОплатитьЗавершение", ЭтаФорма);
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("БезналичнаяОплата", Объект.БезналичнаяОплата);
	СтруктураПараметров.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ВидыКарт", Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора);
	СтруктураПараметров.Вставить("КассаККМ", КассаККМ);
	СтруктураПараметров.Вставить("ИспользоватьПодключаемоеОборудование", ИспользоватьПодключаемоеОборудование);
	СтруктураПараметров.Вставить("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	СтруктураПараметров.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	СтруктураПараметров.Вставить("СуммаДоРасчетаАвтоСкидок", СуммаДоРасчетаАвтоСкидок);
	СтруктураПараметров.Вставить("ТипыДенежныхСредств", ТипыДенежныхСредств);
	СтруктураПараметров.Вставить("Заказ", Объект.Заказ);
	СтруктураПараметров.Вставить("СписокЧековКОплате", СписокРаспределенныхЧеков);
	СтруктураПараметров.Вставить("Сдача", Сдача);
	СтруктураПараметров.Вставить("СформироватьТоварныйЧек", ПечататьТоварныйЧекПоУмолчанию);
	
	Форма = ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаОплаты", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
		
	Объект.ФормаОплаты = ТипыДенежныхСредствБезналичные;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставЧеков", "Доступность", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗапасыИтогСумма", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СуммаДокумента", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаКнопки", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОК", "КнопкаПоУмолчанию", Истина);
	
	Форма.Элементы.ГруппаОплата.ТекущаяСтраница = Форма.Элементы.ГруппаНаличнаяОплата;
	Форма.Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
КонецПроцедуры

&НаКлиенте
&Перед("РассчитатьСуммуВСтрокеТабличнойЧасти")
Процедура am_РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета, УстановитьОписание)
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны,РассчитатьМинимальнуюЦену,ЧекККМ",Истина,Истина,Истина);
	Иначе	
		ПараметрыРасчета.Вставить("РассчитатьМинимальнуюЦену",Истина);
		ПараметрыРасчета.Вставить("ЧекККМ",Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура am_am_ПринудительноОплатаКартойПосле(Команда)
	//am_ПоказатьПредложение();
	
	Если НЕ ЗаполненИсточникПривлечения() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Заголовок = ">>" Тогда
		СвернутьРазвернутьБоковуюПанельКомандНажатие(Неопределено);
	КонецЕсли;
	
	КассаККМПриОткрытии = КассаККМ;
	ЭквайринговыйТерминалПриОткрытии = Объект.ЭквайринговыйТерминал;
	НалоговыйРежимПриОткрытии = Объект.СпециальныйНалоговыйРежим;
	ПатентПриОткрытии = Объект.Патент;
	
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	ОплатитьНоваяКартой("");	
КонецПроцедуры

&НаКлиенте
Процедура am_am_ПринудительноОплатаНаличкойПосле(Команда)
	//am_ПоказатьПредложение();
		
	Если НЕ ЗаполненИсточникПривлечения() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Заголовок = ">>" Тогда
		СвернутьРазвернутьБоковуюПанельКомандНажатие(Неопределено);
	КонецЕсли;
	
	КассаККМПриОткрытии = КассаККМ;
	ЭквайринговыйТерминалПриОткрытии = Объект.ЭквайринговыйТерминал;
	НалоговыйРежимПриОткрытии = Объект.СпециальныйНалоговыйРежим;
	ПатентПриОткрытии = Объект.Патент;
	
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	ОплатитьНоваяНаличкой("");
КонецПроцедуры

&НаКлиенте
Процедура am_am_ПринятьПредоплатуПосле(Команда)
	//am_ПоказатьПредложение();	
	
	Если ПолучитьАвтоматическиЗаполнятьПоСкладам() Тогда
		am_ЗаполнитьПоОстаткамИРезервамВсеСкладыВместо(Неопределено);
	КонецЕсли;	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Принять предоплату по заказу?';"), Режим, 0);
КонецПроцедуры
 
&НаКлиенте
Процедура am_ПриОткрытииПосле(Отказ)
	
	am_ВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура am_ВидимостьЭлементовФормы()
	
	Элементы.ПринятьПредоплату.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если НЕ ЗаполненИсточникПривлечения() Тогда
		Возврат;
	КонецЕсли;

	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Заголовок = ">>" Тогда
		СвернутьРазвернутьБоковуюПанельКомандНажатие(Неопределено);
	КонецЕсли;
	
	КассаККМПриОткрытии = КассаККМ;
	ЭквайринговыйТерминалПриОткрытии = Объект.ЭквайринговыйТерминал;
	НалоговыйРежимПриОткрытии = Объект.СпециальныйНалоговыйРежим;
	ПатентПриОткрытии = Объект.Патент;
	
	Объект.ОперацияСДенежнымиСредствами = Истина;
	Оплатить("");

КонецПроцедуры

&НаКлиенте
Функция ЗаполненИсточникПривлечения()
	
	Результат = ПолучимЗначениеКонстантыИсточникОбращения();
	
	Если Результат Тогда
		Если ПолучимЗначениеКонстантыИсточникОбращения() И НЕ ЗначениеЗаполнено(Объект.am_ИсточникПривлечения) Тогда
			
			//Режим = РежимДиалогаВопрос.ОК;
			//Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроверкаИсточникОбращения", ЭтотОбъект, Параметры);
			//ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполните источник обращения';"), Режим, 0);
			
			// Создание сообщения
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Заполните источник обращения";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Поле = "am_ИсточникПривлечения";
			Сообщение.ПутьКДанным = "am_ИсточникПривлечения";
			
			Сообщение.Сообщить();
			
			Возврат Ложь
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции

&НаСервере
Функция ПолучимЗначениеКонстантыИсточникОбращения()
	
	Возврат РегистрыСведений.am_ХранилищеНастроек.ПолучитьИсточникОбращения()	
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроверкаИсточникОбращения(Результат, Параметры) Экспорт
	

КонецПроцедуры

&НаКлиенте
&Вместо("ПринятьОплату")
Процедура am_ПринятьОплату(Команда)
	//am_ПоказатьПредложение(); 
		
	Если ПолучитьАвтоматическиЗаполнятьПоСкладам() Тогда
		am_ЗаполнитьПоОстаткамИРезервамВсеСкладыВместо(Команда);
	КонецЕсли;
	
	Если НЕ ЗаполненИсточникПривлечения() Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьВызов(Команда);
КонецПроцедуры

&НаКлиенте
Процедура am_am_ПустаяПосле(Команда)
	//am_ПоказатьПредложение();
КонецПроцедуры

&НаСервере
&После("ПриСозданииНаСервере")
Процедура am_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Отказ Тогда
		// ОбрезатьЗаказНа30
		Если РегистрыСведений.am_ХранилищеНастроек.РазрешитьУдерживатьКомиссиюПриВозвратеТовара() И Команды.Найти("ОбрезатьЗаказНа30") = Неопределено Тогда	
			Команда		= ЭтаФорма.Команды.Добавить("ОбрезатьЗаказНа30");
			Команда.Действие	= "ОбрезатьЗаказНа30";
			
			Кнопка = ЭтаФорма.Элементы.Добавить("КнопкаОбрезания", Тип("КнопкаФормы"), Элементы.ГруппаКнопкиСозданияПриходнойНакладной_и_РКО);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Заголовок	= "Возврат с удержанием услуг";
			Кнопка.ИмяКоманды = "ОбрезатьЗаказНа30";	
		КонецЕсли;
		
		Элементы.am_Автомобиль.Видимость = РегистрыСведений.am_ХранилищеНастроек.ПолучитьРазмещениеАвтоВЧККМ();
		Элементы.am_ИсточникПривлечения.Видимость = РегистрыСведений.am_ХранилищеНастроек.ПолучитьИсточникОбращения();
		
		am_СформироватьКарты();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбрезатьЗаказНа30(Команда)
	am_ПроцентУдержания = ПроцентКомиссииПоУмолчанию();
	Элементы.БоковаяПанельВозвраты.Видимость = Ложь;
	Элементы.am_БоковаяПанельВозвратыСКомиссией.Видимость = Истина;
	ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьТаблицуВозвратов(ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроцентКомиссииПоУмолчанию()
	Возврат РегистрыСведений.am_ХранилищеНастроек.ПолучитьПроцентКомиссииПоУмолчанию();
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуВозвратов(ЧекККМНаВозврат)
	ЗаказВозврата = ЧекККМНаВозврат.Заказ;
	НомерКППоУмолчанию = ?(ЗаказВозврата.КоличествоВариантовКП>1,1,0);
	
	СтрокиКопирования = ЗаказВозврата.Запасы.НайтиСтроки(Новый Структура("НомерВариантаКП",НомерКППоУмолчанию));
	am_ЗапасыЗаказа.Очистить();
	Для каждого СтрокаКопирования из СтрокиКопирования Цикл
		НоваяСтрока = am_ЗапасыЗаказа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКопирования);
		НоваяСтрока.КоличествоРедактируемое = СтрокаКопирования.Количество;
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура am_am_ПродолжитьПосле(Команда)
	
	ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЧекККМНаВозврат.Пустая() Или МожноСоздатьЧекНаВозврат(ТекущиеДанные.Ссылка, ТекущиеДанные.СуммаДокумента) Тогда
			ПроверитьСостояниеКассовойСмены();
			НеОтмеченныеСтроки = am_ЗапасыЗаказа.НайтиСтроки(Новый Структура("Оставляем",Ложь));
			
			Для каждого Позиция Из НеОтмеченныеСтроки Цикл
				Если НоменклатураВозвращена(ТекущиеДанные.НомерЧека, Позиция.Номенклатура) Тогда
					Сообщить("Чек на возврат для номенклатуры " + Позиция.Номенклатура + " уже создан.");
					Возврат;					
				КонецЕсли;
			КонецЦикла;
			
			Если НеОтмеченныеСтроки.Количество() > 0 ИЛИ (am_ЗапасыЗаказа.Итог("Количество") - am_ЗапасыЗаказа.Итог("КоличествоРедактируемое") > 0) Тогда
				СрезатьНоменклатуруИУдержатьПроцент(ТекущиеДанные.Ссылка);
			КонецЕсли;			
			ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", Новый Структура("Основание", ТекущиеДанные.Ссылка), ЭтотОбъект,,,,Новый ОписаниеОповещения("ОповещениеОЗакрытиеЧекаККМВозврат",ЭтотОбъект));
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Чек на возврат уже создан.'");
			Сообщение.Поле = "Элементы.СоздатьЧекККМНаВозврат";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран чек ККМ!'");
		Сообщение.Поле = "СписокЧековККМ";
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НоменклатураВозвращена(НомерЧека, Номенклатура)
	ЧекККМПерем = Документы.ЧекККМ.НайтиПоНомеру("НФНФ-" + НомерЧека);
	Заказ = ЧекККМПерем.Заказ.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЧекККМВозврат.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	               |ГДЕ
	               |	ЧекККМВозврат.Заказ.Запасы.Номенклатура.Ссылка = &Номенклатура
	               |	И ЧекККМВозврат.Заказ.Ссылка = &Заказ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
КонецФункции

&НаСервере
Процедура СрезатьНоменклатуруИУдержатьПроцент(ЧекККМНаВозврат)
	ПроцентСкидки = am_ПроцентУдержания / 100;
	
	Док = ЧекККМНаВозврат.Заказ.ПолучитьОбъект();
	
	НомерКППоУмолчанию = ?(Док.КоличествоВариантовКП>1,1,0);
	
	//Вначале очистим все варианты кроме основного
	ТЗ = Док.Запасы.Выгрузить(Новый Структура("НомерВариантаКП",НомерКППоУмолчанию));
	
	Док.Запасы.Очистить();
	
	Для каждого СтрокаДокумента из ТЗ Цикл
		НоваяСтрока = Док.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
		НоваяСтрока.НомерВариантаКП = 1;
		НоваяСтрока.am_ПроцентУдержания = am_ПроцентУдержания;
	КонецЦикла;
	
	
	СтрокиДляКопирования = am_ЗапасыЗаказа.НайтиСтроки(Новый Структура("Оставляем",Истина));
	
	Для каждого СтрокаКопирования из СтрокиДляКопирования Цикл
		СтрокиДокумента = Док.Запасы.НайтиСтроки(Новый Структура("Номенклатура,КлючСвязи",СтрокаКопирования.Номенклатура,СтрокаКопирования.КлючСвязи));
		Для каждого СтрокаДокумента из СтрокиДокумента Цикл
			НоваяСтрока = Док.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
			НоваяСтрока.НомерВариантаКП = 2;
			
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Количество", СтрокаКопирования.Количество);
			ДанныеСтроки.Вставить("Цена", НоваяСтрока.Цена);
			ДанныеСтроки.Вставить("Сумма", 0);
			ДанныеСтроки.Вставить("СтавкаНДС", НоваяСтрока.СтавкаНДС);
			ДанныеСтроки.Вставить("СуммаНДС", 0);
			ДанныеСтроки.Вставить("СуммаВключаетНДС", Док.СуммаВключаетНДС);
			ДанныеСтроки.Вставить("Всего", 0);
			ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", НоваяСтрока.ПроцентСкидкиНаценки);
			ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
						
			ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		КонецЦикла;
	КонецЦикла;	
	Док.ОсновнойВариантКП = 2;
	Док.КоличествоВариантовКП = 2;
	
	СуммаВозврата = Док.Запасы.Выгрузить(Новый Структура("НомерВариантаКП",1)).Итог("Всего") - Док.Запасы.Выгрузить(Новый Структура("НомерВариантаКП",2)).Итог("Всего");
	
	НоваяСтрока = Док.Запасы.Добавить();
	НоваяСтрока.Номенклатура = РегистрыСведений.am_ХранилищеНастроек.ПолучитьУслугуКомиссииПоУмолчанию();
	НоваяСтрока.НомерВариантаКП = 2;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Количество", 1);
	ДанныеСтроки.Вставить("Цена", СуммаВозврата * ПроцентСкидки);
	ДанныеСтроки.Вставить("Сумма", 0);
	ДанныеСтроки.Вставить("СтавкаНДС", СтрокаДокумента.СтавкаНДС);
	ДанныеСтроки.Вставить("СуммаНДС", 0);
	ДанныеСтроки.Вставить("СуммаВключаетНДС", Док.СуммаВключаетНДС);
	ДанныеСтроки.Вставить("Всего", 0);
	ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", 0);
	ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
	
	ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	
	
	Док.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры	

&НаКлиенте
Процедура ОповещениеОЗакрытиеЧекаККМВозврат(П1,П2) Экспорт
	Элементы.БоковаяПанельВозвраты.Видимость = Истина;
	Элементы.am_БоковаяПанельВозвратыСКомиссией.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура am_am_ЗапасыЗаказаПередУдалениемПосле(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура am_am_ЗапасыЗаказаПередНачаломДобавленияПосле(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#Область Акция

&НаКлиенте
Процедура am_am_СоздатьДисконтнуюКартуПосле(Команда)
	
	Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.am_СозданиеКлиента;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПеременные()
	
	am_Телефон      = "";
	am_ФИО          = "";
	am_ДатаРождения = "";
	am_ПеременнаяКонтрагент = "";
	
КонецПроцедуры

&НаКлиенте
Процедура am_am_ТелефонПриИзмененииПосле(Элемент)
	
	Телефон = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(am_Телефон,"-",""),"+",""),"(",""),")","")," ",""),"‒","");
	
	#Область Найдём_контрагента
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокНайденных = am_ПолучитьСписокНайденныхКонтрагентов();
	
	Если СписокНайденных <> Неопределено Тогда
		
		//Если нашли только 1-го
		Если СписокНайденных.Количество() = 1 Тогда 
			
			am_ЗаполнитьПараметрыКонтрагентаНаСервере(СписокНайденных);
			
		Иначе //Если нашли несколько                                             
			
			ЭлементОтбора.ПравоеЗначение = СписокНайденных;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;  
			
			ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе", Истина, Истина);
			ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
			
			ОбработкаВыбора = Новый ОписаниеОповещения("am_ВыбратьЭлементСправочникаКонец",ЭтаФорма);
			
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы,ЭтаФорма,,,,ОбработкаВыбора);	 
			
		КонецЕсли;
	Иначе
		
		am_ФИО = "";
		am_ДатаРождения = "";
		am_ПеременнаяКонтрагент = "";

	КонецЕсли;
	
	am_ПроверитьНаЗаполнение();
	
	#КонецОбласти
	
	
	
	
	
КонецПроцедуры

&НаСервере
Функция am_ПолучитьСписокНайденныхКонтрагентов()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Контрагенты.Ссылка КАК Ссылка,
	//|	Контрагенты.УдалитьНомерТелефона КАК НомерТелефона
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.УдалитьНомерТелефона <> &ПустаяСтрока";
	//Запрос.УстановитьПараметр("ПустаяСтрока","");
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ТЧ = Новый ТаблицаЗначений;
	//ТЧ.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	//КвалификаторыСтроки = Новый КвалификаторыСтроки(100);
	//ТЧ.Колонки.Добавить("НомерТелефона",Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки));	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	НомерТелефона = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДетальныеЗаписи.НомерТелефона,"-",""),"+",""),"(",""),")","")," ",""),"‒","");
	//	НСТР = ТЧ.Добавить();
	//	НСТР.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
	//	НСТР.НомерТелефона = НомерТелефона;
	//КонецЦикла;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТЗ.Ссылка КАК Ссылка,
	//|	ТЗ.НомерТелефона КАК НомерТелефона
	//|ПОМЕСТИТЬ Тч_Список
	//|ИЗ
	//|	&ТЗ КАК ТЗ
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Тч_Список.Ссылка КАК Ссылка
	//|ИЗ
	//|	Тч_Список КАК Тч_Список
	//|ГДЕ
	//|	Тч_Список.НомерТелефона ПОДОБНО &Телефон";
	//
	//Запрос.УстановитьПараметр("Телефон", "%" + am_Телефон + "%");
	//Запрос.УстановитьПараметр("ТЗ", ТЧ);	
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	Выборка = РезультатЗапроса.Выгрузить();
	//	СписокКонтрагентов = Выборка.ВыгрузитьКолонку("Ссылка");
	//Иначе 
	//	СписокКонтрагентов = Неопределено;
	//КонецЕсли;
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И КонтрагентыКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерТелефона";
	
	Запрос.УстановитьПараметр("НомерТелефона", "%"+am_Телефон+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выгрузить();
		СписокКонтрагентов = Выборка.ВыгрузитьКолонку("Ссылка");
	Иначе 
		СписокКонтрагентов = Неопределено;
	КонецЕсли;
	
	Возврат СписокКонтрагентов;	  
	
КонецФункции

&НаСервере
Процедура am_ЗаполнитьПараметрыКонтрагентаНаСервере(СписокНайденных)
	
	am_ФИО = СписокНайденных[0];
	am_ДатаРождения = СписокНайденных[0].ДатаРождения;
	am_ПеременнаяКонтрагент = СписокНайденных[0].Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура am_ПроверитьНаЗаполнение()
	
	Если ЗначениеЗаполнено(am_ФИО) И ЗначениеЗаполнено(am_ДатаРождения) И ЗначениеЗаполнено(am_Телефон) Тогда 
		Элементы.am_ГруппаКнопок2.Доступность = Истина;
		Элементы.am_ГруппаСкидок.Доступность = Истина;
	Иначе
		Элементы.am_ГруппаКнопок2.Доступность = Ложь;
		Элементы.am_ГруппаСкидок.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаменованиеКартыБезСимволов(НаименованиеКарты) 
	НаименованиеКартыБезСимволов = СтрЗаменить(НаименованиеКарты, "%", "");
	НаименованиеКартыБезСимволов = СтрЗаменить(НаименованиеКартыБезСимволов, " ", "");
	Возврат НаименованиеКартыБезСимволов;
КонецФункции

&НаСервере
Процедура am_СформироватьКарты()
	Карты = РегистрыСведений.am_СкидкиРМК.ПолучитьКартыДляРМК();
	Для Каждого Карта Из Карты Цикл
		НаименованиеКарты = Строка(Карта);
		НаименованиеКартыБезСимволов = ПолучитьНаменованиеКартыБезСимволов(НаименованиеКарты);
		
		Если Команды.Найти(НаименованиеКартыБезСимволов) = Неопределено Тогда
			Команда = ЭтаФорма.Команды.Добавить(НаименованиеКартыБезСимволов);
			Команда.Заголовок = НаименованиеКарты;
			Команда.Действие = "am_ПрикреплениеСкидки";
		
			Кнопка = ЭтаФорма.Элементы.Добавить(НаименованиеКартыБезСимволов, Тип("КнопкаФормы"), Элементы.am_ГруппаСкидок);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.РастягиватьПоГоризонтали = Истина;
			Кнопка.ИмяКоманды = НаименованиеКартыБезСимволов;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция am_ПолучитьЗаголовокКоманды(ИмяКоманды)
	ЗаголовокКоманды = Команды.Найти(ИмяКоманды).Заголовок;
	Возврат ЗаголовокКоманды;
КонецФункции

&НаКлиенте
Процедура am_ПрикреплениеСкидки(Команда)
	НаименованиеСкидки = am_ПолучитьЗаголовокКоманды(Команда.Имя);
	am_ПрикрепитьСкидку(НаименованиеСкидки);
КонецПроцедуры

&НаКлиенте
Процедура am_am_Скидка1После(Команда)
	
	am_ПрикрепитьСкидку("ФизЛицо");
	ОчиститьПеременные();
	
КонецПроцедуры

&НаКлиенте
Процедура am_am_Скидка2После(Команда)
	
	am_ПрикрепитьСкидку("ЮридЛицо");
	ОчиститьПеременные();
	
КонецПроцедуры

&НаКлиенте
Процедура am_ПрикрепитьСкидку(ПроцентСкидки)
	Если СтрДлина(am_Телефон) < 11 Тогда
		ПоказатьПредупреждение(, "Номер телефона не может быть меньше 11 символов", 4, "Неверный номер телефона");
		Возврат;
	КонецЕсли;
	
	Если Лев(am_Телефон, 1) <> "8" Тогда
		ПоказатьПредупреждение(, "Номер телефона должен начинаться на ""8""",4, "Неверный номер телефона");
		Возврат;
	КонецЕсли;
	
	Если am_ПеременнаяКонтрагент.Пустая() Тогда
		am_СоздатьКонтрагентаНаСервере();		
		am_СоздатьКартуНаСервере(ПроцентСкидки);
		
	Иначе
		Если ПроцентСкидки = "ФизЛицо" ИЛИ ПроцентСкидки = "ЮридЛицо" Тогда		
			Карта = НайдёмКартуНаСервере();
		Иначе
			Карта = НайдёмКартуНаСервере(ПроцентСкидки + " №");
		КонецЕсли;
		
		Если Карта = Неопределено Тогда
			am_СоздатьКартуНаСервере(ПроцентСкидки);
		Иначе
			ИзменимСкидкуПоКарте(Карта, ПроцентСкидки);
		КонецЕсли;
		
	КонецЕсли;

	Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.Журнал;
	ПереключательЖурналБыстрыеТовары = 1;
	
	Режим = РежимДиалогаВопрос.ОК;
	Оповещение = Новый ОписаниеОповещения("ПустаяПроцедура", ЭтотОбъект, Параметры);
	
	СообщениеОповещения = "Дисконтная карта создана";
	Если ПроцентСкидки = "ФизЛицо" Тогда
		СообщениеОповещения = "Бонусная карта создана";		
	КонецЕсли;
	ПоказатьВопрос(Оповещение, НСтр("ru = '" + СообщениеОповещения + "';"), Режим, 0);
	
КонецПроцедуры

&НаСервере
Функция НайдёмКартуНаСервере(НаименованиеКарты = "Карта №")	
	Карта = Справочники.ДисконтныеКарты.НайтиПоНаименованию(НаименованиеКарты + am_Телефон);
	
	Если Карта = Справочники.ДисконтныеКарты.ПустаяСсылка() Тогда
		Возврат Неопределено
	Иначе
	 	Возврат Карта
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПустаяПроцедура(ЭтотОбъект, Параметры) Экспорт
КонецПроцедуры
	
&НаСервере
Процедура ИзменимСкидкуПоКарте(Карта, ПроцентСкидки)
	
	Спр = Карта.ПолучитьОбъект();
	
	Если ПроцентСкидки = "ФизЛицо" Тогда
		Спр.Владелец = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию("Бонусная карта 5%");
	ИначеЕсли ПроцентСкидки = "ЮридЛицо" Тогда
		Спр.Владелец = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию("Акция Скидка на следующую покупку - 10%");
	Иначе
		Спр.Владелец = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию(ПроцентСкидки);
	КонецЕсли;

	Спр.Записать();
	
	//ВыполнитьЗаписьВРегистрМаркетинговыеАкции(Спр);
	
КонецПроцедуры

&НаКлиенте
Процедура am_ВыбратьЭлементСправочникаКонец(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	am_ПеременнаяКонтрагент = Значение;

КонецПроцедуры

Функция am_ПолучитьСписокНайденныхДисконтныхКарт()
	
	Текст = "";
	
	Если Не am_ПеременнаяКонтрагент.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДисконтныеКарты.КодКартыШтрихкод КАК КодКартыШтрихкод
		|ИЗ
		|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|ГДЕ
		|	ДисконтныеКарты.ВладелецКарты = &КонтрагентДисконта
		|	И ДисконтныеКарты.КодКартыШтрихкод ПОДОБНО &НомерТелефона";
		
		Запрос.УстановитьПараметр("КонтрагентДисконта", am_ПеременнаяКонтрагент);
		Запрос.УстановитьПараметр("НомерТелефона", "%" + am_Телефон + "%");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Текст = Текст + ВыборкаДетальныеЗаписи.КодКартыШтрихкод + "  ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура am_am_ФИОПриИзмененииПосле(Элемент)
	
	am_ПроверитьНаЗаполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура am_am_ДатаРожденияПриИзмененииПосле(Элемент)
	
	am_ПроверитьНаЗаполнение();
	
КонецПроцедуры

&НаСервере
Процедура am_СоздатьКонтрагентаНаСервере()
	
	Конт = Справочники.КонтактныеЛица.СоздатьЭлемент();
	Конт.Наименование = am_ФИО;
	//Конт.ИсточникПривлечения     - временно отключить
	Конт.ДатаСоздания = ТекущаяДата();
	Конт.ДатаРождения = am_ДатаРождения;
	Конт.НомерТелефонаДляПоиска = am_Телефон;

	ДобавитьКИ(Конт, am_Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	
	Конт.Записать();
	
	Спр = Справочники.Контрагенты.СоздатьЭлемент();		
	Спр.ДатаРождения        			= am_ДатаРождения;
	Спр.Покупатель						= Истина;
	Спр.Комментарий         			= "Создан автоматически по акции Скидка на втору покупку";
	Спр.КонтактноеЛицо      			= Конт.Ссылка;
	Спр.Наименование					= am_ФИО;
	Спр.НаименованиеПолное              = am_ФИО;
	Спр.ФИО                             = am_ФИО;
	Спр.ВидКонтрагента					= Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	Спр.ВестиРасчетыПоДоговорам 		= Истина;
	Спр.ВестиРасчетыПоДокументам 		= Истина;
	Спр.ВестиРасчетыПоЗаказам 			= Истина;
	Спр.СчетУчетаРасчетовСПоставщиком 	= ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	Спр.СчетУчетаАвансовПоставщику    	= ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	Спр.СчетУчетаРасчетовСПокупателем 	= ПланыСчетов.Управленческий.РасчетыСПокупателями;
	Спр.СчетУчетаАвансовПокупателя    	= ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	
	ДобавитьКИ(Спр, am_Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	Спр.Записать();
	
	Запись = РегистрыСведений.СвязиКонтрагентКонтакт.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДата();
	Запись.Контрагент = Спр.Ссылка;
	Запись.Контакт = Конт.Ссылка;
	Запись.Записать();
	
	am_ПеременнаяКонтрагент = Спр.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКИ(ЭлементСправочника, ПредставлениеКИ, ВидКИ)
	ЗначениеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПредставлениеКИ, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЭлементСправочника, ЗначениеКИ, ВидКИ, ВидКИ.Тип);
КонецПроцедуры

&НаСервере
Процедура am_СоздатьКартуНаСервере(ПроцентСкидки)
	
	Карта = Справочники.ДисконтныеКарты.СоздатьЭлемент();
	
	НаименованиеКарты = "Карта №";
	Если ПроцентСкидки = "ФизЛицо" Тогда
		Карта.Владелец = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию("Бонусная карта 5%");
	ИначеЕсли ПроцентСкидки = "ЮридЛицо" Тогда
		Карта.Владелец = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию("Акция Скидка на следующую покупку - 10%");
	Иначе
		Карта.Владелец = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию(ПроцентСкидки);
		НаименованиеКарты = ПроцентСкидки + " №";
	КонецЕсли;

	Карта.Наименование 		= НаименованиеКарты + am_Телефон;
	Карта.КодКартыШтрихкод 	= am_Телефон;
	Карта.ВладелецКарты		= am_ПеременнаяКонтрагент;
	Карта.Записать();
	
	//ВыполнитьЗаписьВРегистрМаркетинговыеАкции(Карта);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаписьВРегистрМаркетинговыеАкции(Карта)
	
	Запись = РегистрыСведений.am_МаркетинговыеАкции.СоздатьМенеджерЗаписи();
	
	Запись.Период = ТекущаяДата();
	Запись.Контрагент = am_ПеременнаяКонтрагент;
	Запись.Карта = Карта.Ссылка;
	Запись.Скидка = Карта.Владелец;
	Запись.Действует = Истина;
	
	Запись.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидКартыПоНаименованию(НаименованиеКарты)
	Возврат Справочники.ДисконтныеКарты.НайтиПоНаименованию(НаименованиеКарты).Владелец.Ссылка;
КонецФункции

&НаКлиенте
&После("СчитатьДисконтнуюКартуНажатиеЗавершение")
Процедура am_СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры)
	am_СчитатьДисконтнуюКартуНажатиеЗавершениеНаСервере(ВозвращаемыеПараметры.ДисконтнаяКарта);
КонецПроцедуры

&НаСервере
Процедура am_СчитатьДисконтнуюКартуНажатиеЗавершениеНаСервере(Карта)
	ВидКарты = ПолучитьВидКартыПоНаименованию(Карта);
	Если ВидКарты = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию("Бонусная карта 5%") Тогда
		ИзменитьВидимостьБонусов(Истина);
		am_КоличествоБонусов = ПолучитьКоличествоБаллов(Карта);
	Иначе
		ИзменитьВидимостьБонусов(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьБонусов(ПоказыватьБонусы = Ложь)
	Элементы.am_БонусыЗаголовок.Видимость = ПоказыватьБонусы;
	Элементы.am_Бонусы.Видимость = ПоказыватьБонусы;	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоБаллов(Карта)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БонусныеБаллыОстатки.БонуснаяКарта КАК БонуснаяКарта,
	               |	СУММА(БонусныеБаллыОстатки.НачисленоОстаток) КАК ОстатокБаллов
	               |ИЗ
	               |	РегистрНакопления.БонусныеБаллы.Остатки КАК БонусныеБаллыОстатки
	               |ГДЕ
	               |	БонусныеБаллыОстатки.БонуснаяКарта = &БонуснаяКарта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БонусныеБаллыОстатки.БонуснаяКарта";
	Запрос.УстановитьПараметр("БонуснаяКарта", Карта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОстатокБаллов;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

#КонецОбласти

#Область ЗаполнениеПоОстаткам

&НаСервере
Функция ПолучитьАвтоматическиЗаполнятьПоСкладам()
	Возврат РегистрыСведений.am_ХранилищеНастроек.ПолучитьАвтоматическиЗаполнятьПоСкладам();	
КонецФункции

&НаСервере
Процедура am_ЗаполнитьПоОстаткамИРезервамВсеСкладыВместоНаСервере()
	//ОсновнойСклад = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Витрина (3 этаж)");
	Склады = ПолучитьСклады(Константы.am_ГлавныйСклад.Получить());
	
	Для Каждого Запас Из Объект.Запасы Цикл
		Номенклатура = Запас.Номенклатура;
		СтруктураОтбор = Новый СТруктура;
		СтруктураОтбор.Вставить("Номенклатура", Номенклатура);
		НайденныеЗапасы = Объект.Запасы.НайтиСтроки(СтруктураОтбор);
		
		ИтогоКоличество = 0;
		Для Каждого НайденныйЗапас Из НайденныеЗапасы Цикл
			Если ИтогоКоличество <> 0 Тогда
				Индекс = Объект.Запасы.Индекс(НайденныйЗапас);
				Объект.Запасы.Удалить(Индекс);
			КонецЕсли;
			ИтогоКоличество = ИтогоКоличество + НайденныйЗапас.Количество;
		КонецЦикла;		
		
		Запас.Количество = ИтогоКоличество;
		ЗАпас.Ячейка = Справочники.Ячейки.ПустаяСсылка();
	КонецЦикла;
 
	Для Каждого Запас Из Объект.Запасы.Выгрузить() Цикл
		Номенклатура = Запас.Номенклатура;
			
		КоличествоНаСкладах = am_ПолучитьКоличествоНаСкладах(Номенклатура);
		Если Запас.Количество > КоличествоНаСкладах Тогда
			Запас.Количество = КоличествоНаСкладах;
		КонецЕсли;
		НужноеКоличество = Запас.Количество;
		
		Для Каждого Склад Из Склады Цикл			
			СписокОстатков = am_НайтиНоменклатуруНаЯчейках(Номенклатура, Склад);
			Ячейки = Новый Массив;
			Для Каждого Остаток Из СписокОстатков Цикл
				Если НужноеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Ячейки.Добавить(Остаток.Ячейка);
				Если Остаток.Количество <> 0 Тогда
					НовыйЗапас = ПолучитьНовыйЗапас(Запас, Склад);			
					НовыйЗапас.Ячейка = Остаток.Ячейка;
					
								
					НужноеКоличество = ПолучитьНужноеКоличество(НужноеКоличество, Остаток.Количество, НовыйЗапас);
				КонецЕсли;
			КонецЦикла;
			
			Если НужноеКоличствоДостигнуто(НужноеКоличество, Запас) Тогда
				Прервать;
			КонецЕсли;
			
			
			ОстатокНаСкладах = am_НайтиНоменклатуруНаСкладах(Номенклатура, Склад, Ячейки);
			Если ОстатокНаСкладах > 0 Тогда
				НовыйЗапас = ПолучитьНовыйЗапас(Запас, Склад); 
			
				НужноеКоличество = ПолучитьНужноеКоличество(НужноеКоличество, ОстатокНаСкладах, НовыйЗапас);			
			КонецЕсли;
			
			Если НужноеКоличствоДостигнуто(НужноеКоличество, Запас) Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура am_ЗаполнитьПоОстаткамИРезервамВсеСкладыВместо(Команда)
	am_ЗаполнитьПоОстаткамИРезервамВсеСкладыВместоНаСервере();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Элементы.Запасы.Обновить();
	
	РассчитатьСкидкиНаценки(Команда);
КонецПроцедуры

&НаСервере
Функция ПолучитьСклады(ОсновнойСклад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.Ссылка <> &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ОсновнойСклад);
	
	Склады = Новый Массив;
	Склады.Добавить(ОсновнойСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Склады.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Склады;
КонецФункции

&НаСервере
Функция НужноеКоличствоДостигнуто(НужноеКоличество, Запас)
	Номенклатура = Запас.Номенклатура;
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура", Номенклатура);
	
	Зап = Объект.Запасы.НайтиСтроки(Структура)[0];
	
	Если НужноеКоличество <= 0 Тогда
		Индекс = Объект.Запасы.Индекс(Зап);
		Объект.Запасы.Удалить(Зап);
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПолучитьНовыйЗапас(Запас, Склад)
	НовыйЗапас = Объект.Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЗапас, Запас);
	НовыйЗапас.СтруктурнаяЕдиница = Склад;
	
	НовыйЗапас.Количество = 0;
	Возврат НовыйЗапас;
КонецФункции

&НаСервере
Функция ПолучитьНужноеКоличество(НужноеКоличество, ОстатокКоличество, Запас)
	Если НужноеКоличество > ОстатокКоличество Тогда
		Запас.Количество = ОстатокКоличество;
		НужноеКоличество = НужноеКоличество - ОстатокКоличество;
	Иначе
		Запас.Количество = НужноеКоличество;
		НужноеКоличество = 0;
	КонецЕсли;
	
	Если Запас.Количество = 0 Тогда
		Индекс = Объект.Запасы.Индекс(Запас);
		Объект.Запасы.Удалить(Индекс);
	КонецЕсли;
	
	Возврат НужноеКоличество;
КонецФункции

&НаСервереБезКонтекста
Функция am_НайтиНоменклатуруНаЯчейках(Номенклатура, Склад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	ЗапасыНаСкладахОстатки.Ячейка КАК Ячейка,
	               |	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗапасыНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
	               |ГДЕ
	               |	ЗапасыНаСкладахОстатки.Ячейка <> ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	               |	И ЗапасыНаСкладахОстатки.КоличествоОстаток > 0
	               |	И ЗапасыНаСкладахОстатки.Номенклатура = &Номенклатура
	               |	И ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокНоменклатур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("Ячейка,Количество");
		Структура.Ячейка = Выборка.Ячейка;
		Структура.Количество = Выборка.КоличествоОстаток;
		
		СписокНоменклатур.Добавить(Структура);
	КонецЦикла;
	
	Возврат СписокНоменклатур;
КонецФункции

&НаСервереБезКонтекста
Функция am_НайтиНоменклатуруНаСкладах(Номенклатура, Склад, ИспользованныеЯчейки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗапасыНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
	               |ГДЕ
	               |	ЗапасыНаСкладахОстатки.Номенклатура = &Номенклатура
	               |	И ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	               |	И НЕ ЗапасыНаСкладахОстатки.Ячейка В (&Ячейки)";
	
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	Запрос.УстановитьПараметр("Ячейки", ИспользованныеЯчейки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.КоличествоОстаток;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

&НаСервереБезКонтекста
Функция am_ПолучитьКоличествоНаСкладах(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапасыНаСкладахОстатки.Организация КАК Организация,
	               |	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗапасыНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
	               |ГДЕ
	               |	ЗапасыНаСкладахОстатки.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокНоменклатур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.КоличествоОстаток;
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область РучнаяСкидка

&НаКлиенте
Процедура am_СкидкаПроцентПриИзмененииПосле(Элемент)
	am_ЗаписатьСкидкуВЗапасы(0);
	Если am_РучнаяСкидкаПроцент > 100 Тогда
		am_РучнаяСкидкаПроцент = 100;
	КонецЕсли;
	
	am_РучнаяСкидкаСумма = Объект.СуммаДокумента * (am_РучнаяСкидкаПроцент / 100);
	
	am_ЗаписатьСкидкуВЗапасы(am_РучнаяСкидкаПроцент);
КонецПроцедуры

&НаКлиенте
Процедура am_СкидкаСуммаПриИзмененииПосле(Элемент)
	am_ЗаписатьСкидкуВЗапасы(0);
	
	Если Объект.СуммаДокумента = 0 Тогда
		am_РучнаяСкидкаПроцент = 0;
		am_РучнаяСкидкаСумма = 0;
		Возврат;
	КонецЕсли;
	
	
	Если am_РучнаяСкидкаСумма > Объект.СуммаДокумента Тогда
		am_РучнаяСкидкаСумма = Объект.СуммаДокумента;
	КонецЕсли;
	
	am_РучнаяСкидкаПроцент = am_РучнаяСкидкаСумма * 100 / Объект.СуммаДокумента;

	am_РучнаяСкидкаСумма = Объект.СуммаДокумента * (am_РучнаяСкидкаПроцент / 100);
	am_ЗаписатьСкидкуВЗапасы(am_РучнаяСкидкаПроцент);
КонецПроцедуры

&НаКлиенте
Процедура am_ЗаписатьСкидкуВЗапасы(ПроцентСкидки)
	Для Каждого Запас Из Объект.Запасы Цикл
		Запас.ПроцентСкидкиНаценки = ПроцентСкидки;
		am_РассчиатьСуммуНаценки(Запас);	
		//ТЧПроцентСкидкиНаценкиПриИзменении("Запас"
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	Элементы.Запасы.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура am_РассчиатьСуммуНаценки(СтрокаТЧ) 
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ, ПараметрыРасчета);
КонецПроцедуры

#КонецОбласти

#Область РазливКраски

&НаКлиенте
Процедура am_РазлитьКраскуПосле(Команда)
	//ТекущиеЗапасы = Элементы.Запасы.ТекущиеДанные;
	//Если ТекущиеЗапасы = Неопределено Тогда
	//	Возврат;				
	//КонецЕсли;
	//
	//Номенклатура = ТекущиеЗапасы.Номенклатура;		
	//Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//КоличествоБанок = ТекущиеЗапасы.Количество;;
	//
	//ПараметрыОткрытияФормы = Новый Структура("Номенклатура,КоличествоБанок");
	//ПараметрыОткрытияФормы.Номенклатура = Номенклатура;
	//ПараметрыОткрытияФормы.КоличествоБанок = КоличествоБанок;
	//
	//ОписаниеОповещения = Новый ОписаниеОповещения("ПриРазкрытииРозливаКраски", ЭтаФорма);
	
	//ОткрытьФорму("Документ.ЧекККМ.Форма.am_ФормаРозливаКраски", ПараметрыОткрытияФормы, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.am_ФормаРозливаКраски",,ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура am_РазлитьКраскуПослеНаСервере(Номенклатура)
		
КонецПроцедуры

&НаКлиенте
Процедура ПриРазкрытииРозливаКраски(ПараметрыАналога, Параметры) Экспорт
	Если НЕ ПараметрыАналога.Свойство("Аналог") Тогда
		Возврат;		
	КонецЕсли;
	
	СтрокаЗапасов = Элементы.Запасы.ТекущиеДанные;
	
	НоваяСтрокаЗапасов = Объект.Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасов, СтрокаЗапасов);
	
	Аналог = ПараметрыАналога.Аналог;
	
	НоваяСтрокаЗапасов.Номенклатура = Аналог;
	НоваяСтрокаЗапасов.Цена = 0;
	НоваяСтрокаЗапасов.Сумма = 0;
	
	НоваяСтрокаЗапасов.Количество = ПараметрыАналога.Объем;
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрокаЗапасов;
	ЗапасыКоличествоПриИзменении(Неопределено);
	
	НоваяСтрокаЗапасов.СтруктурнаяЕдиница = ПолучитьСкладНоменклатуры(Аналог);
	
	КоличествоВЗапасах = СтрокаЗапасов.Количество;
	КоличествоВЗапасах = КоличествоВЗапасах - ПараметрыАналога.КоличествоБанок;
	
	Если КоличествоВЗапасах = 0 Тогда
		Индекс = Объект.Запасы.Индекс(СтрокаЗапасов);
		Объект.Запасы.Удалить(Индекс);
	Иначе
		СтрокаЗапасов.Количество = КоличествоВЗапасах;
		Элементы.Запасы.ТекущаяСтрока = СтрокаЗапасов;
		ЗапасыКоличествоПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСкладНоменклатуры(Номенклатура)
	Возврат Номенклатура.Склад;	
КонецФункции

#КонецОбласти

#Область СверкаСкладаСКассойККМ

&НаКлиенте
Процедура am_ЗапасыНоменклатураПриИзмененииПосле(Элемент)
	Если ПолучитьСверятьСкладСКассойККМВЧеке() Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;		
		КонецЕсли;
		
		ТекущаяНоменклатура = ТекущиеДанные.Номенклатура;
		Если ТекущаяНоменклатура = Неопределено Тогда
			Возврат;		
		КонецЕсли;
		Если ПолучитьСкладКассыККМ() <> ПолучитьСкладИзНоменклатуры(ТекущаяНоменклатура) Тогда
			ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииНоменклатуры = Новый ОписаниеОповещения("НеСовпадаютСкладыПриИзмененииНоменклатуры", ЭтаФорма);
			//ПоказатьВопрос(ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииНоменклатуры, "Очистить позицию?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "Склад не совпадает со складом в кассе ККМ");
			ПоказатьПредупреждение(ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииНоменклатуры, "Склад в номенклатуре не совпадает с кассой ККМ", 0, "Не совпадение складов");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура am_ЗначениеПоискаНоменклатурыОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ПолучитьСверятьСкладСКассойККМВЧеке() Тогда		
		ТекущаяНоменклатура = ВыбранноеЗначение;
		Если ТекущаяНоменклатура = Неопределено Тогда
			Возврат;		
		КонецЕсли;
		Если ПолучитьСкладКассыККМ() <> ПолучитьСкладИзНоменклатуры(ТекущаяНоменклатура) Тогда
			ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииНоменклатуры = Новый ОписаниеОповещения("НеСовпадаютСкладыПриИзмененииНоменклатуры", ЭтаФорма);
			//ПоказатьВопрос(ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииНоменклатуры, "Очистить позицию?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "Склад не совпадает со складом в кассе ККМ");
			ПоказатьПредупреждение(ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииНоменклатуры, "Склад в номенклатуре не совпадает с кассой ККМ", 0, "Не совпадение складов");
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура am_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник)
	Если НЕ ПолучитьСверятьСкладСКассойККМВЧеке() Тогда
		Возврат;		
	КонецЕсли;
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		СписокНоменклатуры = am_ОбработкаОповещенияПослеНаСервере(АдресЗапасовВХранилище);
		Для каждого ЭлементНоменклатура Из СписокНоменклатуры Цикл
			Если ЭлементНоменклатура = Неопределено Тогда
				Возврат;				
			КонецЕсли;
			Если ПолучитьСкладКассыККМ() <> ПолучитьСкладИзНоменклатуры(ЭлементНоменклатура) Тогда
				ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииКассы = Новый ОписаниеОповещения("НеСовпадаютСкладыПриИзмененииКассы", ЭтаФорма);
				//ПоказатьВопрос(ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииКассы, "Очистить таличную часть?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "Не совпадают склады с кассой ККМ");						
				ПоказатьПредупреждение(ОписаниеОповещенияНеСовпадаютСкладыПриИзмененииКассы, "Склад в номенклатуре не совпадает с кассой ККМ", 0, "Не совпадение складов");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция am_ОбработкаОповещенияПослеНаСервере(АдресЗапасовВХранилище)
	Запасы = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	СписокНоменклатуры = Новый Массив;
	Для Каждого ЭлементЗапас Из Запасы Цикл
		СписокНоменклатуры.Добавить(ЭлементЗапас.Номенклатура);		
	КонецЦикла;
	
	Возврат СписокНоменклатуры;
КонецФункции

&НаКлиенте
Процедура НеСовпадаютСкладыПриИзмененииКассы(Параметры) Экспорт	
	ЗапасыНаУдаление = Новый Массив;
	Для Каждого ЭлементЗапас Из Объект.Запасы Цикл
		Если ПолучитьСкладКассыККМ() <> ПолучитьСкладИзНоменклатуры(ЭлементЗапас.Номенклатура) Тогда
			ЗапасыНаУдаление.Добавить(ЭлементЗапас);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Запас Из ЗапасыНаУдаление Цикл
		Объект.Запасы.Удалить(Объект.Запасы.Индекс(Запас));	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НеСовпадаютСкладыПриИзмененииНоменклатуры(Параметры) Экспорт	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.Запасы.Удалить(Объект.Запасы.Индекс(ТекущиеДанные));	
КонецПроцедуры

&НаСервере
Функция ПолучитьСкладКассыККМ()
	Возврат Объект.КассаККМ.СтруктурнаяЕдиница;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСкладИзНоменклатуры(Номенклатура)
	Возврат Номенклатура.Склад;	
КонецФункции

&НаСервере
Функция ПолучитьСверятьСкладСКассойККМВЧеке()
	Возврат Константы.am_СверятьСкладСКассойККМВЧеке.Получить();	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура am_ПоказатьПредложение()
	Если НЕ am_ПредложениеПоказано И ПолучитьКонстанту("am_ПоказыватьПредложениеПриОплате") Тогда
		ТекстПредложения = ПолучитьКонстанту("am_ТекстПредложения");
		ПоказатьПредупреждение(,ТекстПредложения, 0, ТекстПредложения);	
		am_ПредложениеПоказано = Истина;
	КонецЕсли;
	
	am_ПредложениеПоказано = Ложь;
КонецПроцедуры

&НаСервере
Функция ПолучитьКонстанту(Наименование)
	Возврат Константы[Наименование].Получить();	
КонецФункции


&НаКлиенте
&После("ОплатитьЗавершение")
Процедура am_ОплатитьЗавершение(Результат, Параметры)
	ТекущийСотрудник = am_ПолучитьТекущегоСотрудника();
	Если НЕ ПолучитьКонстанту("am_ПроверятьОтветственногоВЧекеККМ") ИЛИ НЕ ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Возврат;		
	КонецЕсли;
	Объект.Ответственный = ТекущийСотрудник;
КонецПроцедуры

&НаСервереБезКонтекста
Функция am_ПолучитьТекущегоСотрудника()
	Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ПараметрыСеанса.ТекущийПользователь.Наименование);
	Возврат Сотрудник;
КонецФункции



