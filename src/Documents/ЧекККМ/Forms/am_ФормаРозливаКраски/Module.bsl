#Область ОбработкиСобытий

&НаКлиенте
Процедура am_БанкаДляРозливаПриИзменении(Элемент)
	am_Аналог = НайтиАналогНоменклатуры(am_БанкаДляРозлива);
	
	АналогЗаполнен = ЗначениеЗаполнено(am_Аналог);
	Элементы.ДекорацияОстатокКоличествоНаСкладе.Видимость = АналогЗаполнен;
	Если АналогЗаполнен Тогда
		ОбъемРазлитойБанки = ПолучитьОстатокНоменклатуры(am_Аналог);
		Элементы.ДекорацияОстатокКоличествоНаСкладе.Заголовок = "На складе присутствует разлитая банка в объеме " + ОбъемРазлитойБанки + " мл."; 				
	КонецЕсли;
	
	am_ТараДляРозлива.Очистить();	
КонецПроцедуры

&НаКлиенте
Процедура ВыборБанкиДалее(Команда)
	Если НЕ ЗначениеЗаполнено(am_БанкаДляРозлива) Тогда
		Сообщить("Вы не указали банку");
		Возврат;		
	КонецЕсли;
	                                                          
	Если ПолучитьОстатокНоменклатуры(am_БанкаДляРозлива) <= 0 Тогда
		Сообщить(Строка(am_БанкаДляРозлива) + " нет на складе.");				
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборТары;
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыборТарыНазад(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборБанки;
КонецПроцедуры

&НаКлиенте
Процедура Разлить(Команда)
	Если НЕ ЗначениеЗаполнено(am_Аналог) Тогда
		am_Аналог = СоздатьАналог(am_БанкаДляРозлива);	
	КонецЕсли;
	
	СоздатьПроизводство();			
	
	СоздатьНабор();
	
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НайтиАналогНоменклатуры(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АналогиНоменклатуры.Номенклатура КАК Номенклатура,
	               |	АналогиНоменклатуры.Аналог КАК Аналог
	               |ИЗ
	               |	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
	               |ГДЕ
	               |	(АналогиНоменклатуры.Номенклатура = &Номенклатура
	               |			ИЛИ АналогиНоменклатуры.Аналог = &Номенклатура)";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	НайденнаяНоменклатура = Выборка.Номенклатура;
	Аналог = Выборка.Аналог;
	
	Если Номенклатура = НайденнаяНоменклатура Тогда
		Возврат Аналог;
	Иначе
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СоздатьАналог(Номенклатура)
	Аналог = Справочники.Номенклатура.СоздатьЭлемент();
	Аналог.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	КатегорияНоменклатурыПриИзменении(Аналог);
	
	НаименованиеАналога = Номенклатура.Наименование + " (НА РОЗЛИВ)";
	Аналог.Наименование = НаименованиеАналога; 
	Аналог.НаименованиеПолное = НаименованиеАналога;
	
	ЕдиницаИзмеренияСоздаваемогоАналога = Константы.am_ЕдиницаИзмеренияСоздаваемогоАналога.Получить();
	Аналог.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияСоздаваемогоАналога) Тогда
		Аналог.ЕдиницаИзмерения = ЕдиницаИзмеренияСоздаваемогоАналога;	
	КонецЕсли;
	
	Аналог.Записать();
	
	Аналог = Аналог.Ссылка;
	
	МенеджерЗаписи = РегистрыСведений.АналогиНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Номенклатура = Номенклатура;
	МенеджерЗаписи.Аналог = Аналог;
	МенеджерЗаписи.Записать();
	
	ЦенаПродажи = ПолучитьЦенуНоменклатуры(Номенклатура, Справочники.ВидыЦен.Оптовая);
	МенеджерЗаписиЦены = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЦены.Период = ТекущаяДата();
	МенеджерЗаписиЦены.ВидЦен = Справочники.ВидыЦен.Оптовая;
	МенеджерЗаписиЦены.Номенклатура = Аналог;
	МенеджерЗаписиЦены.Цена = ЦенаПродажи / Номенклатура.am_ОбъемРозлива; 
	МенеджерЗаписиЦены.Записать();
	
	ЦенаЗакупки = ПолучитьЦенуНоменклатуры(Номенклатура, Справочники.ВидыЦен.Учетная);
	МенеджерЗаписиЦены = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЦены.Период = ТекущаяДата();
	МенеджерЗаписиЦены.ВидЦен = Справочники.ВидыЦен.Учетная;
	МенеджерЗаписиЦены.Номенклатура = Аналог;
	МенеджерЗаписиЦены.Цена = ЦенаЗакупки / Номенклатура.am_ОбъемРозлива; 
	МенеджерЗаписиЦены.Записать();	
	
	Возврат Аналог;
КонецФункции

&НаСервере
Процедура СоздатьПроизводство()
	Если am_БанкаДляРозлива.am_ОбъемРозлива = 0 Тогда
		Сообщить("В номенклатуре не указан объем розлива.");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(am_КэшЗначений)<>Тип("Структура") Тогда
		am_КэшЗначений = Новый Структура;
	КонецЕсли; 
	am_КэшЗначений.Вставить("ИспользоватьЭтапыПроизводства", ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства"));
	am_КэшЗначений.Вставить("ВыполнениеЭтаповРазнымиПодразделениями", ПолучитьФункциональнуюОпцию("ВыполнениеЭтаповРазнымиПодразделениями"));
	am_КэшЗначений.Вставить("ВОРазборка", Перечисления.ВидыОперацийСборкаЗапасов.Разборка);
	am_КэшЗначений.Вставить("ВОСборка", Перечисления.ВидыОперацийСборкаЗапасов.Сборка);

	
	ДокументПроизводство = Документы.СборкаЗапасов.СоздатьДокумент();
	 
	ДокументПроизводство.Организация = ПолучитьОрганизацию();
	ДокументПроизводство.Дата = ТекущаяДата();
	ОрганизацияПриИзменении(ДокументПроизводство);

	ДокументПроизводство.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка;
	ВидОперацииПриИзменении(ДокументПроизводство);

	ДокументПроизводство.СтруктурнаяЕдиница = am_Аналог.Склад;
	ИзготовительПриИзменении(ДокументПроизводство);

	ДокументПроизводство.СтруктурнаяЕдиницаПродукции = am_Аналог.Склад;
	ПолучательПриИзменении(ДокументПроизводство);

	Продукция = ДокументПроизводство.Продукция.Добавить();
	Продукция.Номенклатура = am_Аналог;
	ПродукцияНоменклатураПриИзменении(ДокументПроизводство, Продукция);
		
	Продукция.СтруктурнаяЕдиница = am_Аналог.Склад;
	Продукция.Количество = am_БанкаДляРозлива.am_ОбъемРозлива * am_КоличествоБанок;

	Материалы = ДокументПроизводство.Запасы.Добавить();
	Материалы.Номенклатура = am_БанкаДляРозлива;
	ЗапасыНоменклатураПриИзменении(ДокументПроизводство, Материалы);

	Материалы.СтруктурнаяЕдиница = am_БанкаДляРозлива.Склад;
	Материалы.Количество = am_КоличествоБанок;

	ДокументПроизводство.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Сообщить(Строка(am_БанкаДляРозлива) + " успешно разлита.");
 КонецПроцедуры
 
&НаСервере
Процедура СоздатьНабор()
	Если am_БанкаДляРозлива.am_ОбъемРозлива = 0 Тогда
		Сообщить("В номенклатуре не указан объем розлива.");	
		Возврат;
	КонецЕсли;
	
	СтрокаНаборов = "";
	
	Для Каждого Тара Из am_ТараДляРозлива Цикл		
		Если Не ЗначениеЗаполнено(Тара.Тара) Тогда
			Сообщить("Не заполнена тара!");
			Продолжить;
		КонецЕсли;
		НаименованиеНабора = "Набор " + Строка(am_Аналог) + " " + Тара.Объем + " " + Строка(Тара.Тара);
		НайденныйНабор = Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеНабора);
		Если ЗначениеЗаполнено(НайденныйНабор) Тогда
			Продолжить;			
		КонецЕсли;
		
		Набор = Справочники.Номенклатура.СоздатьЭлемент();
		Набор.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
		КатегорияНоменклатурыПриИзменении(Набор);
		
		Набор.Наименование = НаименованиеНабора;
		Набор.НаименованиеПолное = НаименованиеНабора;
		Набор.ЭтоНабор = Истина;
		
		Набор.СпособРасчетаЦеныНабора = Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих;
		Набор.ВариантПечатиНабора = Перечисления.ВариантыПечатиНаборов.НаборИКомплектующие;
		Набор.Записать();		
		
		ДобавитьСоставНабора(Набор, am_Аналог, am_Аналог.ЕдиницаИзмерения, Тара.Объем, 0);
		ДобавитьСоставНабора(Набор, Тара.Тара, Тара.Тара.ЕдиницаИзмерения, 1, 1);
		Если ЗначениеЗаполнено(Тара.Крышка) Тогда
			ДобавитьСоставНабора(Набор, Тара.Крышка, Тара.Крышка.ЕдиницаИзмерения, 1, 2);				
		КонецЕсли;
		
		СтрокаНаборов = СтрокаНаборов + НаименованиеНабора + ", ";
	КонецЦикла;
	
	СтрокаНаборов = Лев(СтрокаНаборов, СтрДлина(СтрокаНаборов) - 2); 
	Если ЗначениеЗаполнено(СтрокаНаборов) Тогда
		Сообщить("Были созданы следующие наборы: " + СтрокаНаборов);
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьСоставНабора(Набор, Номенклатура, ЕдиницаИзмерения, Количество, Порядок)
	МенеджерЗаписи = РегистрыСведений.СоставНаборов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НоменклатураНабора = Набор.Ссылка;
	МенеджерЗаписи.Номенклатура = Номенклатура;
	МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
	МенеджерЗаписи.Количество = Количество;
	МенеджерЗаписи.ДоляСтоимости = 1;
	МенеджерЗаписи.Порядок = Порядок;
	МенеджерЗаписи.Записать();	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НастройкиПользователей.Настройка КАК Настройка,
	               |	НастройкиПользователей.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Настройка.Наименование = ""Основная организация""";

	Выборка = Запрос.Выполнить().Выбрать();
	Организация = Справочники.Организации.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Значение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();	
	КонецЕсли;	
	
	Возврат Организация;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОстатокНоменклатуры(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки КАК ЗапасыОстатки
		|ГДЕ
		|	ЗапасыОстатки.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоличествоОстаток;		
	КонецЕсли;	
	
	Возврат 0;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВидЦены)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	               |ГДЕ
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦен
	               |	И ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("ВидЦен", 		ВидЦены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;		
	КонецЕсли;
	
	Возврат 0;
КонецФункции

#Область ПриИзмененииРеквизитовДокументаПроизводства

#Область ПриИзмененииИзготовителя

&НаСервере
Процедура ИзготовительПриИзменении(ДокументПроизводство)
	
	Если ЗначениеЗаполнено(ДокументПроизводство.СтруктурнаяЕдиница) Тогда
	
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Подразделение", ДокументПроизводство.СтруктурнаяЕдиница);
		СтруктураДанные.Вставить("ВидОперации", ДокументПроизводство.ВидОперации);
		
		СтруктураДанные = ПолучитьДанныеИзготовительПриИзменении(СтруктураДанные);
		
		ТипСтруктурнойЕдиницы = СтруктураДанные.ТипСтруктурнойЕдиницы;
		ДокументПроизводство.ПодписьКонтролера = СтруктураДанные.ПодписьКонтролера;

		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаПродукции) Тогда
			
			ДокументПроизводство.СтруктурнаяЕдиницаПродукции = СтруктураДанные.СтруктурнаяЕдиницаПродукции;
			ДокументПроизводство.ЯчейкаПродукции = СтруктураДанные.ЯчейкаПродукции;
			
		Иначе
			
			ДокументПроизводство.СтруктурнаяЕдиницаПродукции = ДокументПроизводство.СтруктурнаяЕдиница;
			ДокументПроизводство.ЯчейкаПродукции = ДокументПроизводство.Ячейка;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаЗапасов) Тогда
			
			СтруктурнаяЕдиницаЗапасов = СтруктураДанные.СтруктурнаяЕдиницаЗапасов;
			ЯчейкаЗапасов = СтруктураДанные.ЯчейкаЗапасов;
		Иначе
			
			СтруктурнаяЕдиницаЗапасов = ДокументПроизводство.СтруктурнаяЕдиница;
			ЯчейкаЗапасов = ДокументПроизводство.Ячейка;
			
		КонецЕсли;
		
		ДокументПроизводство.СтруктурнаяЕдиницаЗапасов = СтруктурнаяЕдиницаЗапасов;
		ДокументПроизводство.ЯчейкаЗапасов = ЯчейкаЗапасов;
		ОбновитьСкладВТЧ(ДокументПроизводство); 
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаОтходов) Тогда
			
			ДокументПроизводство.СтруктурнаяЕдиницаОтходов = СтруктураДанные.СтруктурнаяЕдиницаОтходов;
			ДокументПроизводство.ЯчейкаОтходов = СтруктураДанные.ЯчейкаОтходов;
		
			
		Иначе
			
			ДокументПроизводство.СтруктурнаяЕдиницаОтходов = ДокументПроизводство.СтруктурнаяЕдиница;
			ДокументПроизводство.ЯчейкаОтходов = ДокументПроизводство.Ячейка;
	
			
		КонецЕсли;
		
		ДокументПроизводство.ПодписьКладовщикаОтправил = ?(СтруктураДанные.ЭтоСборка, СтруктураДанные.СтруктурнаяЕдиницаЗапасовПодписьМОЛ, СтруктураДанные.СтруктурнаяЕдиницаПродукцииПодписьМОЛ);
		ДокументПроизводство.ПодписьКладовщикаПолучил = ?(СтруктураДанные.ЭтоСборка, СтруктураДанные.СтруктурнаяЕдиницаПродукцииПодписьМОЛ, СтруктураДанные.СтруктурнаяЕдиницаЗапасовПодписьМОЛ);
		 
	
	Иначе
		
		
		ДокументПроизводство.ПодписьКонтролера = Неопределено;
		ДокументПроизводство.ПодписьКладовщикаОтправил = Неопределено;
		ДокументПроизводство.ПодписьКладовщикаПолучил = Неопределено;
		ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.ПустаяСсылка");
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеИзготовительПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", СтруктураДанные.Подразделение.ПолучательПеремещения);
		СтруктураДанные.Вставить("ЯчейкаПродукции", СтруктураДанные.Подразделение.ЯчейкаПолучателяПеремещения);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукцииПодписьМОЛ", СтруктураДанные.Подразделение.ПолучательПеремещения.ПодписьМОЛ);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаПродукции", Неопределено);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукцииПодписьМОЛ", СтруктураДанные.Подразделение.ПодписьМОЛ);
		
	КонецЕсли;
	
	Если СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", СтруктураДанные.Подразделение.ЯчейкаИсточникаПеремещения);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасовПодписьМОЛ", СтруктураДанные.Подразделение.ИсточникПеремещения.ПодписьМОЛ);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Неопределено);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасовПодписьМОЛ", СтруктураДанные.Подразделение.ПодписьМОЛ);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаОтходов", СтруктураДанные.Подразделение.ПолучательОтходов);
	СтруктураДанные.Вставить("ЯчейкаОтходов", СтруктураДанные.Подразделение.ЯчейкаПолучателяОтходов);
	
	СтруктураДанные.Вставить("ОрдерныйСклад", СтруктураДанные.Подразделение.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ОрдерныйСкладПродукции", СтруктураДанные.Подразделение.ПолучательПеремещения.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ОрдерныйСкладОтходов", СтруктураДанные.Подразделение.ПолучательОтходов.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ПолучательОтходов.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ОрдерныйСкладЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ЭтоСборка", (СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка));
	СтруктураДанные.Вставить("ПодписьКонтролера", СтруктураДанные.Подразделение.ПодписьМОЛ);
	СтруктураДанные.Вставить("ТипСтруктурнойЕдиницы", СтруктураДанные.Подразделение.ТипСтруктурнойЕдиницы);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ОбновитьСкладВТЧ(ДокументПроизводство)
	
	Если ДокументПроизводство.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		ИмяТЧ = "Продукция";
		ИмяТЧОчистка = "Запасы";
	Иначе
		ИмяТЧ = "Запасы";
		ИмяТЧОчистка = "Продукция";
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из ДокументПроизводство[ИмяТЧОчистка] Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Ложь;
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из ДокументПроизводство[ИмяТЧ] Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ДокументПроизводство.СтруктурнаяЕдиницаЗапасов;
		СтрокаТабличнойЧасти.Ячейка = ДокументПроизводство.ЯчейкаЗапасов;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЦикла; 
	Если ДокументПроизводство.РучноеРаспределение Тогда
		Для каждого СтрокаТабличнойЧасти Из ДокументПроизводство.РаспределениеЗапасов Цикл
			Если ДокументПроизводство.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
				СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
			Иначе
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ДокументПроизводство.СтруктурнаяЕдиницаЗапасов;
				СтрокаТабличнойЧасти.Ячейка = ДокументПроизводство.ЯчейкаЗапасов;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ am_КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ am_КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = am_КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, am_КэшЗначений.ДоступностьЯчеек);
		Результат = am_КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, НЕ Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);	
	КонецЦикла; 
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииПолучателя

&НаСервере
Процедура ПолучательПриИзменении(ДокументПроизводство)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация",	ДокументПроизводство.Организация);
	СтруктураДанные.Вставить("Склад",		ДокументПроизводство.СтруктурнаяЕдиницаПродукции);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	ДокументПроизводство.ПодписьКладовщикаПолучил = СтруктураДанные.ПодписьМОЛ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Склад, "ОрдерныйСклад, ТипСтруктурнойЕдиницы, ПодписьМОЛ");
	
	СтруктураДанные.Вставить("ОрдерныйСклад", ЗначенияРеквизитов.ОрдерныйСклад = Истина 
	И ЗначенияРеквизитов.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ПодписьМОЛ", ЗначенияРеквизитов.ПодписьМОЛ);
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти

#Область ПриИзмененииСписания

&НаСервере
Процедура СписаниеПриИзменении(ДокументПроизводство)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", ДокументПроизводство.Организация);
	СтруктураДанные.Вставить("Склад",		ДокументПроизводство.СтруктурнаяЕдиницаЗапасов);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	ДокументПроизводство.ПодписьКладовщикаОтправил = СтруктураДанные.ПодписьМОЛ;
	
	ОбновитьСкладВТЧ(ДокументПроизводство);
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииВидаОперации

&НаСервере
Процедура ВидОперацииПриИзменении(ДокументПроизводство)
	
	ВидОперацииПриИзмененииСервер(ДокументПроизводство);	
	
	ИмяТабличнойЧасти = ?(ДокументПроизводство.ВидОперации = am_КэшЗначений.ВОСборка, "Продукция", "Запасы");
	Для каждого СтрокаТабличнойЧасти Из ДокументПроизводство[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти["СтранаПроисхождения"] = Неопределено;
		СтрокаТабличнойЧасти["НомерГТД"] = Неопределено;
		СтрокаТабличнойЧасти["Резерв"] = 0;
		
	КонецЦикла;
	
	Если ДокументПроизводство.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		
		
		Если am_КэшЗначений.ИспользоватьЭтапыПроизводства Тогда
			Для каждого СтрокаТабличнойЧасти Из ДокументПроизводство.Продукция Цикл
				СтрокаТабличнойЧасти.Этапы = "";
			КонецЦикла; 
			Для каждого СтрокаТабличнойЧасти Из ДокументПроизводство.Запасы Цикл
				СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
			КонецЦикла; 
			Для каждого СтрокаТабличнойЧасти Из ДокументПроизводство.РаспределениеЗапасов Цикл
				СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
			КонецЦикла; 
		КонецЕсли; 
		ДокументПроизводство.ВыполненныеЭтапы.Очистить();
	КонецЕсли;
	
	ОбновитьСкладВТЧ(ДокументПроизводство);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер(ДокументПроизводство)
	
	Если ДокументПроизводство.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		ИмяТЧ = "Запасы";
	Иначе
		ИмяТЧ = "Продукция";
	КонецЕсли;
	Для каждого СтрокаПродукция Из ДокументПроизводство[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(СтрокаПродукция.Партия)
			И СтрокаПродукция.Партия.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье") Тогда
			СтрокаПродукция.Партия = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииОрганизации

&НаСервере
Процедура ОрганизацияПриИзменении(ДокументПроизводство)

	// Обработка события изменения организации.
	ДокументПроизводство.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(ДокументПроизводство.Организация);
	Компания = СтруктураДанные.Компания;
	
	ДокументПроизводство.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	СтруктураДанные.Вставить("ПодписьРуководителя", Организация.ПодписьРуководителя);
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти

#Область ПриИзмененииНоменклатурыВПродукции

&НаСервере
Процедура ПродукцияНоменклатураПриИзменении(ДокументПроизводство, СтрокаТабличнойЧасти)	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	Если ДокументПроизводство.ВидОперации = am_КэшЗначений.ВОРазборка Тогда
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	Если ДокументПроизводство.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ДокументПроизводство.СтруктурнаяЕдиницаЗапасов;
			СтрокаТабличнойЧасти.Ячейка = ДокументПроизводство.ЯчейкаЗапасов;
	КонецЕсли; 
	
	ОчиститьВыполненныеЭтапы(ДокументПроизводство, СтрокаТабличнойЧасти);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;

	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) 
		И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) 
		И СтруктураДанные.Номенклатура.ИспользоватьПартии Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии") Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации") Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОпреацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
			СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
			СтруктураДанные.Номенклатура));
	КонецЕсли;
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ОчиститьВыполненныеЭтапы(ДокументПроизводство, СтрокаТабличнойЧасти)
	
	Если НЕ am_КэшЗначений.ИспользоватьЭтапыПроизводства Тогда
		Возврат;
	КонецЕсли; 	
	
	Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	СтрокиВыполненныеЭтапы = ДокументПроизводство.ВыполненныеЭтапы.НайтиСтроки(СтруктураОтбора);
	
	ЕстьЭтапы = СтрокиВыполненныеЭтапы.Количество()>0;
	
	Для каждого СтрокаЭтап Из СтрокиВыполненныеЭтапы Цикл
		ДокументПроизводство.ВыполненныеЭтапы.Удалить(СтрокаЭтап);
	КонецЦикла; 
		
	Если НЕ СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа) Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства")
		И ЗначениеЗаполнено(СтруктураДанные.Спецификация)
		И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
		ВидПроизводства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Спецификация, "ВидПроизводства");
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", ЗначениеЗаполнено(ВидПроизводства));
	Иначе
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", Ложь);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции 

#КонецОбласти

#Область ПриИзмененииНоменклатурыВМатериалах

&НаСервере
Процедура ЗапасыНоменклатураПриИзменении(ДокументПроизводство, СтрокаТабличнойЧасти)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	
	СтруктураДанные.Вставить("Склад", СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("Ячейка", СтрокаТабличнойЧасти.Ячейка);
	

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	Если ДокументПроизводство.ВидОперации = am_КэшЗначений.ВОСборка Тогда
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	
	Если ДокументПроизводство.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ДокументПроизводство.СтруктурнаяЕдиницаЗапасов;
		СтрокаТабличнойЧасти.Ячейка = ДокументПроизводство.ЯчейкаЗапасов;
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПриИзмененииРеквизитовНоменклатуры

#Область ПриИзмененииКатегории

&НаСервере
Процедура КатегорияНоменклатурыПриИзменении(СправочникНоменклатура)
		
	КатегорияНоменклатурыПриИзмененииНаСервере(СправочникНоменклатура);
	
	
	Если ЗначениеЗаполнено(СправочникНоменклатура.КатегорияНоменклатуры) Тогда
		ЗаполнитьЗначенияПоУмолчанию(СправочникНоменклатура);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура КатегорияНоменклатурыПриИзмененииНаСервере(СправочникНоменклатура)
	
	ЗаполнитьРеквизитыАлкогольнойПродукцииПоКатегорииНоменклатуры(СправочникНоменклатура);
	ЗаполнитьРеквизитыПодконтрольнойПродукцииПоКатегорииНоменклатуры(СправочникНоменклатура);
	ЗаполнитьРеквизитыГИСМПоКатегорииНоменклатуры(СправочникНоменклатура);
	
	ФОУчетТабачнойПродукции = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Табак);
	Если ФОУчетТабачнойПродукции И СправочникНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		СправочникНоменклатура.ТабачнаяПродукция = СправочникНоменклатура.КатегорияНоменклатуры.ТабачнаяПродукция;
	КонецЕсли;
	
	ФОУчетОбувнойПродукции = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Обувь);
	Если ФОУчетОбувнойПродукции И СправочникНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		СправочникНоменклатура.ОбувнаяПродукция = СправочникНоменклатура.КатегорияНоменклатуры.ОбувнаяПродукция;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникНоменклатура.КатегорияНоменклатуры) Тогда
		ТипНоменклатуры = СправочникНоменклатура.ТипНоменклатуры;
		КатегорииНоменклатурыСервер.ЗаполнитьСвойстваНоменклатурыПоКатегории(СправочникНоменклатура);
		СправочникНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;

	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыАлкогольнойПродукцииПоКатегорииНоменклатуры(СправочникНоменклатура)

	Если СправочникНоменклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СправочникНоменклатура.КатегорияНоменклатуры) Тогда
		СправочникНоменклатура.ВидАлкогольнойПродукции = Неопределено;
		СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции = Неопределено;
		СправочникНоменклатура.Производитель = Неопределено;
	КонецЕсли;
	
	СправочникНоменклатура.ВидАлкогольнойПродукции = СправочникНоменклатура.КатегорияНоменклатуры.ВидАлкогольнойПродукции;
	СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции = СправочникНоменклатура.КатегорияНоменклатуры.ПроизводительИмпортерАлкогольнойПродукции;
	СправочникНоменклатура.Производитель = СправочникНоменклатура.КатегорияНоменклатуры.Производитель;
	
	СправочникНоменклатура.ИмпортнаяАлкогольнаяПродукция = СправочникНоменклатура.КатегорияНоменклатуры.ИмпортнаяАлкогольнаяПродукция;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыГИСМПоКатегорииНоменклатуры(СправочникНоменклатура)
	
	Если СправочникНоменклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитовГИСМ = Новый Массив;
	МассивРеквизитовГИСМ.Добавить("ВидМаркировки");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМВид");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМСпособВыпускаВОборот");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМРазмер");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМGTIN");
	МассивРеквизитовГИСМ.Добавить("ТНВЭДГИСМ");
	
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.КатегорияНоменклатуры) Тогда
		Для Каждого РеквизитГИСМ Из МассивРеквизитовГИСМ Цикл
			СправочникНоменклатура[РеквизитГИСМ] = ?(ТипЗнч(СправочникНоменклатура[РеквизитГИСМ]) = Тип("Булево"), Ложь, Неопределено);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитГИСМ Из МассивРеквизитовГИСМ Цикл
		Если Не СправочникНоменклатура[РеквизитГИСМ] = СправочникНоменклатура.КатегорияНоменклатуры[РеквизитГИСМ] Тогда
			СправочникНоменклатура[РеквизитГИСМ] = СправочникНоменклатура.КатегорияНоменклатуры[РеквизитГИСМ];
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.ВидМаркировки) Тогда СправочникНоменклатура.ВидМаркировки = Перечисления.ВидыМаркировки.НеМаркируется КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию(СправочникНоменклатура, НовыйЭлемент = Истина)
	
	ТипНоменклатуры = СправочникНоменклатура.ТипНоменклатуры;
	
	Если Не НовыйЭлемент Тогда
		
		СправочникНоменклатура.СрокПополнения = 0;
		СправочникНоменклатура.ИспользоватьХарактеристики = Ложь;
		СправочникНоменклатура.ПроверятьЗаполнениеХарактеристики = Ложь;
		СправочникНоменклатура.ИспользоватьПартии = Ложь;
		СправочникНоменклатура.НормаВремени = 0;
		
		
		СправочникНоменклатура.СрокПополнения = 1;
		
	Иначе	
		СправочникНоменклатура.СпособПополнения = ?(Не ЗначениеЗаполнено(СправочникНоменклатура.СпособПополнения), ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка"), СправочникНоменклатура.СпособПополнения);
	КонецЕсли;
	
	
	СправочникНоменклатура.МетодОценки = ?(Не ЗначениеЗаполнено(СправочникНоменклатура.МетодОценки), ПредопределенноеЗначение("Перечисление.МетодОценкиЗапасов.ПоСредней"), СправочникНоменклатура.МетодОценки);

	
	СправочникНоменклатура.НаправлениеДеятельности = ?(Не ЗначениеЗаполнено(СправочникНоменклатура.НаправлениеДеятельности), ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление"), СправочникНоменклатура.НаправлениеДеятельности);
	
	
	СправочникНоменклатура.Склад = ?(Не ЗначениеЗаполнено(СправочникНоменклатура.Склад), ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад"), СправочникНоменклатура.Склад);
	
	
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.СчетУчетаЗапасов) Тогда
		
		СправочникНоменклатура.СчетУчетаЗапасов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
		Если Не ЗначениеЗаполнено(СправочникНоменклатура.ТипНоменклатуры)
			Или ЭтоЗапас(СправочникНоменклатура) Или ЭтоСертификат(СправочникНоменклатура) Тогда
			СправочникНоменклатура.СчетУчетаЗапасов = ПредопределенноеЗначение("ПланСчетов.Управленческий.СырьеИМатериалы");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.СчетУчетаЗатрат) Тогда
		
		СправочникНоменклатура.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
		Если Не ЗначениеЗаполнено(СправочникНоменклатура.ТипНоменклатуры)
			Или ЭтоЗапас(СправочникНоменклатура)
			Или ЭтоРабота(СправочникНоменклатура)
			Или ЭтоОперация(СправочникНоменклатура)
			Или ЭтоСертификат(СправочникНоменклатура) Тогда
				СправочникНоменклатура.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.НезавершенноеПроизводство");

			
		КонецЕсли;
		
		Если ЭтоУслуга(СправочникНоменклатура) Тогда
			СправочникНоменклатура.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.СчетУчетаЗатрат) Тогда
		
		СправочникНоменклатура.СчетУчетаДоходов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
		Если ЭтоСертификат(СправочникНоменклатура) Тогда
			СправочникНоменклатура.СчетУчетаДоходов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПрочиеДоходы");
		КонецЕсли;
		
	КонецЕсли;
	
	СправочникНоменклатура.ТоварнаяНоменклатураВЭД = Неопределено;
	
	
	СправочникНоменклатура.СрокИсполненияЗаказа = ?(Не ЗначениеЗаполнено(СправочникНоменклатура.СрокИсполненияЗаказа),1, СправочникНоменклатура.СрокИсполненияЗаказа);
	
	
	
		
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.ВидСтавкиНДС) Тогда
		СправочникНоменклатура.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.БезНДС");
		
	КонецЕсли;
	
	
	Если Не ЭтоЗапас(СправочникНоменклатура) Тогда
		СправочникНоменклатура.ВидАлкогольнойПродукции = Неопределено;
		СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции = Неопределено;
		СправочникНоменклатура.ОбъемДАЛ = 0;
	КонецЕсли;
	
	Если Не НовыйЭлемент Тогда
		ЗаполнитьЗначенияПоУмолчаниюСервер(СправочникНоменклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчаниюСервер(СправочникНоменклатура)
	
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.СпособПополнения) Тогда
		Если ЗначениеЗаполнено(СправочникНоменклатура.КатегорияНоменклатуры.СпособПополнения) Тогда
			СправочникНоменклатура.СпособПополнения = СправочникНоменклатура.КатегорияНоменклатуры.СпособПополнения;
		Иначе
			СправочникНоменклатура.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПодконтрольнойПродукцииПоКатегорииНоменклатуры(СправочникНоменклатура)
	
	Если СправочникНоменклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитовВЕТИС = Новый Массив;
	МассивРеквизитовВЕТИС.Добавить("ПодконтрольнаяПродукцияВЕТИС");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьПроизводителяВЕТИСПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьИдентификаторПартииВЕТИСПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьДатуПроизводстваПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьСрокГодностиПартии");
	МассивРеквизитовВЕТИС.Добавить("АвтоматическиГенерироватьПартии");
	
	Если Не ЗначениеЗаполнено(СправочникНоменклатура.КатегорияНоменклатуры) Тогда
		Для Каждого РеквизитВЕТИС Из МассивРеквизитовВЕТИС Цикл
			СправочникНоменклатура[РеквизитВЕТИС] = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитВЕТИС Из МассивРеквизитовВЕТИС Цикл
		Если Не СправочникНоменклатура[РеквизитВЕТИС] = СправочникНоменклатура.КатегорияНоменклатуры[РеквизитВЕТИС] Тогда
			СправочникНоменклатура[РеквизитВЕТИС] = СправочникНоменклатура.КатегорияНоменклатуры[РеквизитВЕТИС];
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ЭтоЗапас(СправочникНоменклатура)
	Возврат СправочникНоменклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
КонецФункции

&НаСервере
Функция ЭтоУслуга(СправочникНоменклатура)
	Возврат СправочникНоменклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
КонецФункции

&НаСервере
Функция ЭтоРабота(СправочникНоменклатура)
	Возврат СправочникНоменклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
КонецФункции

&НаСервере
Функция ЭтоОперация(СправочникНоменклатура)
	Возврат СправочникНоменклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция");
КонецФункции

&НаСервере
Функция ЭтоСертификат(СправочникНоменклатура)
	Возврат СправочникНоменклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
КонецФункции

#КонецОбласти

#КонецОбласти
